/**
 * Included in the body of TricubicInterpolation::getFactors(
			const float vals[64], const float3& entry, const float3& dir,
			std::integral_constant<FactorAlgorithm, FactorAlgorithm::EXPLICIT>)
 */

poly_t out = { 0 };

const float ua = entry.x;
const float wa = entry.y;
const float va = entry.z;
const float ub = dir.x;
const float wb = dir.y;
const float vb = dir.z;

const float uaFactorTwo = ua * ua;
const float waFactorTwo = wa * wa;
const float vaFactorTwo = va * va;
const float uaMinus1FactorTwo = (ua - 1) * (ua - 1);
const float waMinus1FactorTwo = (wa - 1) * (wa - 1);
const float vaMinus1FactorTwo = (va - 1) * (va - 1);
const float ubFactorTwo = ub * ub;
const float wbFactorTwo = wb * wb;
const float vbFactorTwo = vb * vb;
const float uaFactorThree = uaFactorTwo * ua;
const float waFactorThree = waFactorTwo * wa;
const float vaFactorThree = vaFactorTwo * va;
const float uaMinus1FactorThree = uaMinus1FactorTwo * (ua - 1);
const float waMinus1FactorThree = waMinus1FactorTwo * (wa - 1);
const float vaMinus1FactorThree = vaMinus1FactorTwo * (va - 1);
const float ubFactorThree = ubFactorTwo * ub;
const float wbFactorThree = wbFactorTwo * wb;
const float vbFactorThree = vbFactorTwo * vb;

#define VALS(x,y,z) vals[x+1 + 4*(y+1 + 4*(z+1))]
float sample = VALS(-1, -1, -1);
float coeff = -(uaMinus1FactorThree * vaMinus1FactorThree * waMinus1FactorThree) / 216;
out.coeff[0] = coeff * sample;
coeff = -(waMinus1FactorThree * (3 * ub * uaMinus1FactorTwo * vaMinus1FactorThree + 3 * vb * uaMinus1FactorThree * vaMinus1FactorTwo)) / 216 - (wb * uaMinus1FactorThree * vaMinus1FactorThree * waMinus1FactorTwo) / 72;
out.coeff[1] = coeff * sample;
coeff = -(waMinus1FactorThree * (3 * ubFactorTwo * (ua - 1) * vaMinus1FactorThree + 3 * vbFactorTwo * uaMinus1FactorThree * (va - 1) + 9 * ub * vb * uaMinus1FactorTwo * vaMinus1FactorTwo)) / 216 - (wb * waMinus1FactorTwo * (3 * ub * uaMinus1FactorTwo * vaMinus1FactorThree + 3 * vb * uaMinus1FactorThree * vaMinus1FactorTwo)) / 72 - (wbFactorTwo * uaMinus1FactorThree * vaMinus1FactorThree * (wa - 1)) / 72;
out.coeff[2] = coeff * sample;
coeff = -(waMinus1FactorThree * (ubFactorThree * vaMinus1FactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * vbFactorTwo * uaMinus1FactorTwo * (va - 1) + 9 * ubFactorTwo * vb * (ua - 1) * vaMinus1FactorTwo)) / 216 - (wb * waMinus1FactorTwo * (3 * ubFactorTwo * (ua - 1) * vaMinus1FactorThree + 3 * vbFactorTwo * uaMinus1FactorThree * (va - 1) + 9 * ub * vb * uaMinus1FactorTwo * vaMinus1FactorTwo)) / 72 - (wbFactorThree * uaMinus1FactorThree * vaMinus1FactorThree) / 216 - (wbFactorTwo * (wa - 1) * (3 * ub * uaMinus1FactorTwo * vaMinus1FactorThree + 3 * vb * uaMinus1FactorThree * vaMinus1FactorTwo)) / 72;
out.coeff[3] = coeff * sample;
coeff = -(wbFactorThree * (3 * ub * uaMinus1FactorTwo * vaMinus1FactorThree + 3 * vb * uaMinus1FactorThree * vaMinus1FactorTwo)) / 216 - (waMinus1FactorThree * (3 * ub * vbFactorThree * uaMinus1FactorTwo + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ubFactorTwo * vbFactorTwo * (ua - 1) * (va - 1))) / 216 - (wbFactorTwo * (wa - 1) * (3 * ubFactorTwo * (ua - 1) * vaMinus1FactorThree + 3 * vbFactorTwo * uaMinus1FactorThree * (va - 1) + 9 * ub * vb * uaMinus1FactorTwo * vaMinus1FactorTwo)) / 72 - (wb * waMinus1FactorTwo * (ubFactorThree * vaMinus1FactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * vbFactorTwo * uaMinus1FactorTwo * (va - 1) + 9 * ubFactorTwo * vb * (ua - 1) * vaMinus1FactorTwo)) / 72;
out.coeff[4] = coeff * sample;
coeff = -((3 * ubFactorTwo * vbFactorThree * (ua - 1) + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * waMinus1FactorThree) / 216 - (wbFactorThree * (3 * ubFactorTwo * (ua - 1) * vaMinus1FactorThree + 3 * vbFactorTwo * uaMinus1FactorThree * (va - 1) + 9 * ub * vb * uaMinus1FactorTwo * vaMinus1FactorTwo)) / 216 - (wbFactorTwo * (wa - 1) * (ubFactorThree * vaMinus1FactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * vbFactorTwo * uaMinus1FactorTwo * (va - 1) + 9 * ubFactorTwo * vb * (ua - 1) * vaMinus1FactorTwo)) / 72 - (wb * waMinus1FactorTwo * (3 * ub * vbFactorThree * uaMinus1FactorTwo + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ubFactorTwo * vbFactorTwo * (ua - 1) * (va - 1))) / 72;
out.coeff[5] = coeff * sample;
coeff = -(wbFactorThree * (ubFactorThree * vaMinus1FactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * vbFactorTwo * uaMinus1FactorTwo * (va - 1) + 9 * ubFactorTwo * vb * (ua - 1) * vaMinus1FactorTwo)) / 216 - (wb * (3 * ubFactorTwo * vbFactorThree * (ua - 1) + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * waMinus1FactorTwo) / 72 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 216 - (wbFactorTwo * (wa - 1) * (3 * ub * vbFactorThree * uaMinus1FactorTwo + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ubFactorTwo * vbFactorTwo * (ua - 1) * (va - 1))) / 72;
out.coeff[6] = coeff * sample;
coeff = -(wbFactorThree * (3 * ub * vbFactorThree * uaMinus1FactorTwo + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ubFactorTwo * vbFactorTwo * (ua - 1) * (va - 1))) / 216 - (wbFactorTwo * (3 * ubFactorTwo * vbFactorThree * (ua - 1) + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * (wa - 1)) / 72 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 72;
out.coeff[7] = coeff * sample;
coeff = -(wbFactorThree * (3 * ubFactorTwo * vbFactorThree * (ua - 1) + 3 * ubFactorThree * vbFactorTwo * (va - 1))) / 216 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 72;
out.coeff[8] = coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] = coeff * sample;
sample = VALS(-1, -1, 0);
coeff = (((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * uaMinus1FactorThree * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (waMinus1FactorThree * (3 * ub * uaMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (va * vb * (3 * va - 4) * uaMinus1FactorThree) / 2)) / 36 + (wb * uaMinus1FactorThree * waMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * ((vbFactorTwo * (3 * va - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * va * vb * (3 * va - 4) * uaMinus1FactorTwo) / 2)) / 36 + (wb * waMinus1FactorTwo * (3 * ub * uaMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (va * vb * (3 * va - 4) * uaMinus1FactorThree) / 2)) / 12 + (wbFactorTwo * uaMinus1FactorThree * (wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * ((vbFactorThree * uaMinus1FactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * vbFactorTwo * (3 * va - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * va * vb * (3 * va - 4) * (ua - 1)) / 2)) / 36 + (wb * waMinus1FactorTwo * ((vbFactorTwo * (3 * va - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * va * vb * (3 * va - 4) * uaMinus1FactorTwo) / 2)) / 12 + (wbFactorThree * uaMinus1FactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 36 + (wbFactorTwo * (wa - 1) * (3 * ub * uaMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (va * vb * (3 * va - 4) * uaMinus1FactorThree) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * (3 * ub * uaMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (va * vb * (3 * va - 4) * uaMinus1FactorThree) / 2)) / 36 + (waMinus1FactorThree * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 2) * (ua - 1)) / 2 + (ubFactorThree * va * vb * (3 * va - 4)) / 2)) / 36 + (wbFactorTwo * (wa - 1) * ((vbFactorTwo * (3 * va - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * va * vb * (3 * va - 4) * uaMinus1FactorTwo) / 2)) / 12 + (wb * waMinus1FactorTwo * ((vbFactorThree * uaMinus1FactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * vbFactorTwo * (3 * va - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * va * vb * (3 * va - 4) * (ua - 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorTwo * (3 * va - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * va * vb * (3 * va - 4) * uaMinus1FactorTwo) / 2)) / 36 + (wbFactorTwo * (wa - 1) * ((vbFactorThree * uaMinus1FactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * vbFactorTwo * (3 * va - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * va * vb * (3 * va - 4) * (ua - 1)) / 2)) / 12 + (wb * waMinus1FactorTwo * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 2) * (ua - 1)) / 2 + (ubFactorThree * va * vb * (3 * va - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (2 * ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 72;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * uaMinus1FactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * ub * vbFactorTwo * (3 * va - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * va * vb * (3 * va - 4) * (ua - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 + (wbFactorTwo * (wa - 1) * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 2) * (ua - 1)) / 2 + (ubFactorThree * va * vb * (3 * va - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (2 * ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 2) * (ua - 1)) / 2 + (ubFactorThree * va * vb * (3 * va - 4)) / 2)) / 36 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (2 * ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + (3 * ubFactorTwo * vbFactorThree * (ua - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, -1, 1);
coeff = -(((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((uaMinus1FactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) * waMinus1FactorThree) / 36 - (wb * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * ((vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) * uaMinus1FactorThree + 3 * ubFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (ua - 1) + 3 * ub * uaMinus1FactorTwo * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)))) / 36 - (wb * (uaMinus1FactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) * waMinus1FactorTwo) / 12 - (wbFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wbFactorThree * uaMinus1FactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 36 - (waMinus1FactorThree * ((vbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) + (3 * ub * vbFactorTwo * (3 * va - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * vb * (ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 36 + (wbFactorTwo * ((vb * uaMinus1FactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * ub * uaMinus1FactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) * (wa - 1)) / 12 + (wb * waMinus1FactorTwo * (3 * ubFactorTwo * (ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * (3 * va - 1) * uaMinus1FactorThree) / 2 + (3 * ub * vb * uaMinus1FactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((vb * uaMinus1FactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * ub * uaMinus1FactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 36 - (waMinus1FactorThree * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 1) * (ua - 1)) / 2)) / 36 + (wbFactorTwo * (wa - 1) * (3 * ubFactorTwo * (ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * (3 * va - 1) * uaMinus1FactorThree) / 2 + (3 * ub * vb * uaMinus1FactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (wb * waMinus1FactorTwo * ((vbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) + (3 * ub * vbFactorTwo * (3 * va - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * vb * (ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * (3 * ubFactorTwo * (ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * (3 * va - 1) * uaMinus1FactorThree) / 2 + (3 * ub * vb * uaMinus1FactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 36 - (wb * waMinus1FactorTwo * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 1) * (ua - 1)) / 2)) / 12 - (wbFactorTwo * (wa - 1) * ((vbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) + (3 * ub * vbFactorTwo * (3 * va - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * vb * (ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 + (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 72;
out.coeff[5] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 24 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 - (wbFactorTwo * (wa - 1) * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 1) * (ua - 1)) / 2)) / 12 - (wbFactorThree * ((vbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) + (3 * ub * vbFactorTwo * (3 * va - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * vb * (ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 36;
out.coeff[6] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (ub + 3 * vb - 3 * ua * vb - 3 * ub * va)) / 24 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (wbFactorThree * ((3 * ub * vbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * va - 1) * (ua - 1)) / 2)) / 36;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * ubFactorTwo * vbFactorThree * (ua - 1)) / 2)) / 36 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, -1, 2);
coeff = (vaFactorThree * uaMinus1FactorThree * waMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = ((3 * ub * vaFactorThree * uaMinus1FactorTwo + 3 * vaFactorTwo * vb * uaMinus1FactorThree) * waMinus1FactorThree) / 216 + (vaFactorThree * wb * uaMinus1FactorThree * waMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * (3 * ubFactorTwo * vaFactorThree * (ua - 1) + 3 * va * vbFactorTwo * uaMinus1FactorThree + 9 * ub * vaFactorTwo * vb * uaMinus1FactorTwo)) / 216 + (wb * (3 * ub * vaFactorThree * uaMinus1FactorTwo + 3 * vaFactorTwo * vb * uaMinus1FactorThree) * waMinus1FactorTwo) / 72 + (vaFactorThree * wbFactorTwo * uaMinus1FactorThree * (wa - 1)) / 72;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * (ubFactorThree * vaFactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * va * vbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * vaFactorTwo * vb * (ua - 1))) / 216 + (wbFactorTwo * (3 * ub * vaFactorThree * uaMinus1FactorTwo + 3 * vaFactorTwo * vb * uaMinus1FactorThree) * (wa - 1)) / 72 + (vaFactorThree * wbFactorThree * uaMinus1FactorThree) / 216 + (wb * waMinus1FactorTwo * (3 * ubFactorTwo * vaFactorThree * (ua - 1) + 3 * va * vbFactorTwo * uaMinus1FactorThree + 9 * ub * vaFactorTwo * vb * uaMinus1FactorTwo)) / 72;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * (3 * ub * vaFactorThree * uaMinus1FactorTwo + 3 * vaFactorTwo * vb * uaMinus1FactorThree)) / 216 + (waMinus1FactorThree * (3 * ubFactorThree * vaFactorTwo * vb + 3 * ub * vbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * va * vbFactorTwo * (ua - 1))) / 216 + (wbFactorTwo * (wa - 1) * (3 * ubFactorTwo * vaFactorThree * (ua - 1) + 3 * va * vbFactorTwo * uaMinus1FactorThree + 9 * ub * vaFactorTwo * vb * uaMinus1FactorTwo)) / 72 + (wb * waMinus1FactorTwo * (ubFactorThree * vaFactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * va * vbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * vaFactorTwo * vb * (ua - 1))) / 72;
out.coeff[4] += coeff * sample;
coeff = ((3 * ubFactorThree * va * vbFactorTwo + 3 * ubFactorTwo * vbFactorThree * (ua - 1)) * waMinus1FactorThree) / 216 + (wbFactorThree * (3 * ubFactorTwo * vaFactorThree * (ua - 1) + 3 * va * vbFactorTwo * uaMinus1FactorThree + 9 * ub * vaFactorTwo * vb * uaMinus1FactorTwo)) / 216 + (wb * waMinus1FactorTwo * (3 * ubFactorThree * vaFactorTwo * vb + 3 * ub * vbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * va * vbFactorTwo * (ua - 1))) / 72 + (wbFactorTwo * (wa - 1) * (ubFactorThree * vaFactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * va * vbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * vaFactorTwo * vb * (ua - 1))) / 72;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * vaFactorThree + vbFactorThree * uaMinus1FactorThree + 9 * ub * va * vbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * vaFactorTwo * vb * (ua - 1))) / 216 + (wbFactorTwo * (wa - 1) * (3 * ubFactorThree * vaFactorTwo * vb + 3 * ub * vbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * va * vbFactorTwo * (ua - 1))) / 72 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 216 + (wb * (3 * ubFactorThree * va * vbFactorTwo + 3 * ubFactorTwo * vbFactorThree * (ua - 1)) * waMinus1FactorTwo) / 72;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * (3 * ubFactorThree * vaFactorTwo * vb + 3 * ub * vbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * va * vbFactorTwo * (ua - 1))) / 216 + (wbFactorTwo * (3 * ubFactorThree * va * vbFactorTwo + 3 * ubFactorTwo * vbFactorThree * (ua - 1)) * (wa - 1)) / 72 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 72;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (3 * ubFactorThree * va * vbFactorTwo + 3 * ubFactorTwo * vbFactorThree * (ua - 1))) / 216 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 0, -1);
coeff = (((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * uaMinus1FactorThree * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (vaMinus1FactorThree * (3 * ub * uaMinus1FactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * uaMinus1FactorThree) / 2)) / 36 + (vb * uaMinus1FactorThree * vaMinus1FactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12;
out.coeff[1] += coeff * sample;
coeff = (vaMinus1FactorThree * ((wbFactorTwo * (3 * wa - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * ub * wa * wb * (3 * wa - 4) * uaMinus1FactorTwo) / 2)) / 36 + (vb * vaMinus1FactorTwo * (3 * ub * uaMinus1FactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * uaMinus1FactorThree) / 2)) / 12 + (vbFactorTwo * uaMinus1FactorThree * (va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorThree * uaMinus1FactorThree) / 2 + (3 * ub * wbFactorTwo * (3 * wa - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wa * wb * (3 * wa - 4) * (ua - 1)) / 2)) / 36 + (vb * vaMinus1FactorTwo * ((wbFactorTwo * (3 * wa - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * ub * wa * wb * (3 * wa - 4) * uaMinus1FactorTwo) / 2)) / 12 + (vbFactorThree * uaMinus1FactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 36 + (vbFactorTwo * (va - 1) * (3 * ub * uaMinus1FactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * uaMinus1FactorThree) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (vbFactorThree * (3 * ub * uaMinus1FactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * uaMinus1FactorThree) / 2)) / 36 + (vaMinus1FactorThree * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua - 1)) / 2 + (ubFactorThree * wa * wb * (3 * wa - 4)) / 2)) / 36 + (vbFactorTwo * (va - 1) * ((wbFactorTwo * (3 * wa - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * ub * wa * wb * (3 * wa - 4) * uaMinus1FactorTwo) / 2)) / 12 + (vb * vaMinus1FactorTwo * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorThree * uaMinus1FactorThree) / 2 + (3 * ub * wbFactorTwo * (3 * wa - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wa * wb * (3 * wa - 4) * (ua - 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (vbFactorThree * ((wbFactorTwo * (3 * wa - 2) * uaMinus1FactorThree) / 2 + 3 * ubFactorTwo * (ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * ub * wa * wb * (3 * wa - 4) * uaMinus1FactorTwo) / 2)) / 36 + (vbFactorTwo * (va - 1) * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorThree * uaMinus1FactorThree) / 2 + (3 * ub * wbFactorTwo * (3 * wa - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wa * wb * (3 * wa - 4) * (ua - 1)) / 2)) / 12 + (vb * vaMinus1FactorTwo * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua - 1)) / 2 + (ubFactorThree * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (2 * ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 72;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorThree * uaMinus1FactorThree) / 2 + (3 * ub * wbFactorTwo * (3 * wa - 2) * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wa * wb * (3 * wa - 4) * (ua - 1)) / 2)) / 36 + (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 + (vbFactorTwo * (va - 1) * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua - 1)) / 2 + (ubFactorThree * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (2 * ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua - 1)) / 2 + (ubFactorThree * wa * wb * (3 * wa - 4)) / 2)) / 36 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (2 * ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (ubFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) + (3 * ubFactorTwo * wbFactorThree * (ua - 1)) / 2)) / 36 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 0, 0);
coeff = -(((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * uaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -(uaMinus1FactorThree * ((va * vb * (3 * va - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2)) / 6 - (ub * uaMinus1FactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * ((vbFactorTwo * (3 * va - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wa * wb * (3 * va - 4) * (3 * wa - 4)) / 4)) / 6 - (ub * uaMinus1FactorTwo * ((va * vb * (3 * va - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2)) / 2 - (ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(uaMinus1FactorThree * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 2)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 2) * (3 * wa - 4)) / 4)) / 6 - (ubFactorTwo * (ua - 1) * ((va * vb * (3 * va - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2)) / 2 - (ub * uaMinus1FactorTwo * ((vbFactorTwo * (3 * va - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wa * wb * (3 * va - 4) * (3 * wa - 4)) / 4)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 6;
out.coeff[3] += coeff * sample;
coeff = -(ubFactorThree * ((va * vb * (3 * va - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2)) / 6 - (ubFactorTwo * (ua - 1) * ((vbFactorTwo * (3 * va - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wa * wb * (3 * va - 4) * (3 * wa - 4)) / 4)) / 2 - (ub * uaMinus1FactorTwo * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 2)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 2) * (3 * wa - 4)) / 4)) / 2 - (vb * wb * uaMinus1FactorThree * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo + 4 * vb * wb - 4 * va * wbFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (2 * vb + 2 * wb - 3 * va * wb - 3 * vb * wa)) / 24 - (ubFactorTwo * (ua - 1) * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 2)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 2) * (3 * wa - 4)) / 4)) / 2 - (ubFactorThree * ((vbFactorTwo * (3 * va - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wa * wb * (3 * va - 4) * (3 * wa - 4)) / 4)) / 6 - (ub * vb * wb * uaMinus1FactorTwo * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo + 4 * vb * wb - 4 * va * wbFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 8;
out.coeff[5] += coeff * sample;
coeff = (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (2 * vb + 2 * wb - 3 * va * wb - 3 * vb * wa)) / 8 - (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 24 - (ubFactorThree * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 2)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 2) * (3 * wa - 4)) / 4)) / 6 - (ubFactorTwo * vb * wb * (ua - 1) * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo + 4 * vb * wb - 4 * va * wbFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 8;
out.coeff[6] += coeff * sample;
coeff = -(ubFactorThree * ((wbFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2))) / 2 + (vbFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2))) / 2 + ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo))) / 6 - (ubFactorTwo * (ua - 1) * ((wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2)) / 2 - (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 8;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * ((wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2)) / 6 - (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 0, 1);
coeff = (((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * uaMinus1FactorThree) / 6 + (ub * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * ((wbFactorTwo * (3 * wa - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (vb * wa * wb * (3 * wa - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 - (ub * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * uaMinus1FactorTwo) / 2 - (ubFactorTwo * (ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (uaMinus1FactorThree * ((vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vb * wbFactorTwo * (3 * wa - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 1) * (3 * wa - 4)) / 4)) / 6 - (ub * uaMinus1FactorTwo * ((wbFactorTwo * (3 * wa - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (vb * wa * wb * (3 * wa - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (ubFactorTwo * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * (ua - 1)) / 2 - (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (uaMinus1FactorThree * ((vbFactorThree * wa * wb * (3 * wa - 4)) / 4 - (vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 2)) / 4)) / 6 - (ubFactorThree * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (ubFactorTwo * (ua - 1) * ((wbFactorTwo * (3 * wa - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (vb * wa * wb * (3 * wa - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (ub * uaMinus1FactorTwo * ((vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vb * wbFactorTwo * (3 * wa - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 1) * (3 * wa - 4)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * (ua - 1) * ((vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vb * wbFactorTwo * (3 * wa - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 1) * (3 * wa - 4)) / 4)) / 2 - (ubFactorThree * ((wbFactorTwo * (3 * wa - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (vb * wa * wb * (3 * wa - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 + (ub * uaMinus1FactorTwo * ((vbFactorThree * wa * wb * (3 * wa - 4)) / 4 - (vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 2)) / 4)) / 2 - (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (2 * vb + wb - 3 * va * wb - 3 * vb * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * ((vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vb * wbFactorTwo * (3 * wa - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wa * wb * (3 * va - 1) * (3 * wa - 4)) / 4)) / 6 + (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 24 + (ubFactorTwo * (ua - 1) * ((vbFactorThree * wa * wb * (3 * wa - 4)) / 4 - (vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 2)) / 4)) / 2 - (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (2 * vb + wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * ((vbFactorThree * wa * wb * (3 * wa - 4)) / 4 - (vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 2)) / 4)) / 6 + (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (2 * vb + wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = (ubFactorThree * ((vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2 + (wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 6 + (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 0, 2);
coeff = -(vaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * uaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -(uaMinus1FactorThree * (vaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) + 3 * vaFactorTwo * vb * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3))) / 36 - (ub * vaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * uaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * (vaFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) + 3 * va * vbFactorTwo * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) + 3 * vaFactorTwo * vb * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)))) / 36 - (ub * uaMinus1FactorTwo * (vaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) + 3 * vaFactorTwo * vb * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3))) / 12 - (ubFactorTwo * vaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (ua - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(uaMinus1FactorThree * (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (vaFactorThree * wbFactorThree) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * va * vbFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 36 - (ubFactorThree * vaFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 36 - (ub * uaMinus1FactorTwo * ((vaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * va * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * vaFactorTwo * vb * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ubFactorTwo * vaFactorTwo * (ua - 1) * (4 * vb - 6 * vb * waFactorTwo + 3 * vb * waFactorThree + 3 * va * waFactorTwo * wb - 4 * va * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(ubFactorThree * vaFactorTwo * (4 * vb - 6 * vb * waFactorTwo + 3 * vb * waFactorThree + 3 * va * waFactorTwo * wb - 4 * va * wa * wb)) / 72 - (ubFactorTwo * (ua - 1) * ((vaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * va * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * vaFactorTwo * vb * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ub * uaMinus1FactorTwo * (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (vaFactorThree * wbFactorThree) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * va * vbFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 12 - (vb * wb * uaMinus1FactorThree * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb + 9 * va * vb * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(ubFactorThree * ((vaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * va * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * vaFactorTwo * vb * wa * wb * (3 * wa - 4)) / 2)) / 36 - (ubFactorTwo * (ua - 1) * (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (vaFactorThree * wbFactorThree) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * va * vbFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 12 - (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (3 * va * wb - 2 * vb + 3 * vb * wa)) / 72 - (ub * vb * wb * uaMinus1FactorTwo * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb + 9 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(ubFactorThree * (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (vaFactorThree * wbFactorThree) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * va * vbFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 36 - (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 72 - (ubFactorTwo * vb * wb * (ua - 1) * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb + 9 * va * vb * wa * wb)) / 24 - (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (3 * va * wb - 2 * vb + 3 * vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ubFactorThree * vb * wb * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * vbFactorTwo * wa - 6 * va * vb * wb + 9 * va * vb * wa * wb)) / 72 - (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (3 * va * wb - 2 * vb + 3 * vb * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * (vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) + (3 * va * vbFactorTwo * wbFactorThree) / 2)) / 36 - (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 1, -1);
coeff = -(((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((uaMinus1FactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * ub * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) * vaMinus1FactorThree) / 36 - (vb * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * vaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) * uaMinus1FactorThree + 3 * ubFactorTwo * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (ua - 1) + 3 * ub * uaMinus1FactorTwo * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)))) / 36 - (vb * (uaMinus1FactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * ub * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) * vaMinus1FactorTwo) / 12 - (vbFactorTwo * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree * (va - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vbFactorThree * uaMinus1FactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 36 - (vaMinus1FactorThree * ((wbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (3 * ub * wbFactorTwo * (3 * wa - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * wb * (ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 36 + (vbFactorTwo * ((wb * uaMinus1FactorThree * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * ub * uaMinus1FactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) * (va - 1)) / 12 + (vb * vaMinus1FactorTwo * (3 * ubFactorTwo * (ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * uaMinus1FactorThree) / 2 + (3 * ub * wb * uaMinus1FactorTwo * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (vbFactorThree * ((wb * uaMinus1FactorThree * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * ub * uaMinus1FactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6))) / 36 - (vaMinus1FactorThree * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua - 1)) / 2)) / 36 + (vbFactorTwo * (va - 1) * (3 * ubFactorTwo * (ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * uaMinus1FactorThree) / 2 + (3 * ub * wb * uaMinus1FactorTwo * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 - (vb * vaMinus1FactorTwo * ((wbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (3 * ub * wbFactorTwo * (3 * wa - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * wb * (ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (vbFactorThree * (3 * ubFactorTwo * (ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * uaMinus1FactorThree) / 2 + (3 * ub * wb * uaMinus1FactorTwo * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 36 - (vb * vaMinus1FactorTwo * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua - 1)) / 2)) / 12 - (vbFactorTwo * (va - 1) * ((wbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (3 * ub * wbFactorTwo * (3 * wa - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * wb * (ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 + (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 72;
out.coeff[5] += coeff * sample;
coeff = (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 24 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 - (vbFactorTwo * (va - 1) * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua - 1)) / 2)) / 12 - (vbFactorThree * ((wbFactorThree * uaMinus1FactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (3 * ub * wbFactorTwo * (3 * wa - 1) * uaMinus1FactorTwo) / 2 - (3 * ubFactorTwo * wb * (ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 36;
out.coeff[6] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (ub + 3 * wb - 3 * ua * wb - 3 * ub * wa)) / 24 - (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24 - (vbFactorThree * ((3 * ub * wbFactorThree * uaMinus1FactorTwo) / 2 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * ubFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua - 1)) / 2)) / 36;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (ubFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * ubFactorTwo * wbFactorThree * (ua - 1)) / 2)) / 36 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 1, 0);
coeff = (((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * uaMinus1FactorThree) / 6 + (ub * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * ((vbFactorTwo * (3 * va - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wb * (3 * va - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 - (ub * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2) * uaMinus1FactorTwo) / 2 - (ubFactorTwo * (ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (uaMinus1FactorThree * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 - (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * wb * (3 * va - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 1)) / 4)) / 6 - (ub * uaMinus1FactorTwo * ((vbFactorTwo * (3 * va - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wb * (3 * va - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 - (ubFactorTwo * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2) * (ua - 1)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (uaMinus1FactorThree * ((va * vb * wbFactorThree * (3 * va - 4)) / 4 - (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * wa - 1)) / 4)) / 6 - (ubFactorThree * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (ubFactorTwo * (ua - 1) * ((vbFactorTwo * (3 * va - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wb * (3 * va - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 + (ub * uaMinus1FactorTwo * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 - (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * wb * (3 * va - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * (ua - 1) * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 - (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * wb * (3 * va - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 1)) / 4)) / 2 - (ubFactorThree * ((vbFactorTwo * (3 * va - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * wb * (3 * va - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 + (ub * uaMinus1FactorTwo * ((va * vb * wbFactorThree * (3 * va - 4)) / 4 - (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * wa - 1)) / 4)) / 2 - (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (vb + 2 * wb - 3 * va * wb - 3 * vb * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * ((wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 - (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * wb * (3 * va - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (va * vb * wbFactorTwo * (3 * va - 4) * (3 * wa - 1)) / 4)) / 6 + (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 24 + (ubFactorTwo * (ua - 1) * ((va * vb * wbFactorThree * (3 * va - 4)) / 4 - (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * wa - 1)) / 4)) / 2 - (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (vb + 2 * wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * ((va * vb * wbFactorThree * (3 * va - 4)) / 4 - (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * wa - 1)) / 4)) / 6 + (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (vb + 2 * wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = (ubFactorThree * ((wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 2)) / 6 + (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 1, 1);
coeff = -(((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -((((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * uaMinus1FactorThree) / 6 - (ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * (((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 6 - (ub * (((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * uaMinus1FactorTwo) / 2 - (ubFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (ua - 1)) / 2;
out.coeff[2] += coeff * sample;
coeff = (uaMinus1FactorThree * ((wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (vb * wbFactorTwo * (3 * wa - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wb * (3 * va - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 - (ubFactorTwo * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (wb * (2 * wa - 3 * waFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * (ua - 1)) / 2 - (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 + (ub * uaMinus1FactorTwo * ((wbFactorTwo * (3 * wa - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorTwo * (3 * va - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (uaMinus1FactorThree * ((vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 1)) / 4)) / 6 - (ubFactorThree * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (wb * (2 * wa - 3 * waFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 6 + (ubFactorTwo * (ua - 1) * ((wbFactorTwo * (3 * wa - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorTwo * (3 * va - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 + (ub * uaMinus1FactorTwo * ((wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (vb * wbFactorTwo * (3 * wa - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wb * (3 * va - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (ubFactorThree * ((wbFactorTwo * (3 * wa - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorTwo * (3 * va - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 + (ub * uaMinus1FactorTwo * ((vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 1)) / 4)) / 2 + (ubFactorTwo * (ua - 1) * ((wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (vb * wbFactorTwo * (3 * wa - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wb * (3 * va - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 + (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (vb + wb - 3 * va * wb - 3 * vb * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * ((wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (vb * wbFactorTwo * (3 * wa - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorTwo * wb * (3 * va - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 + (ubFactorTwo * (ua - 1) * ((vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 1)) / 4)) / 2 - (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 24 + (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (vb + wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * ((vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * wa - 1)) / 4)) / 6 - (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 8 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (vb + wb - 3 * va * wb - 3 * vb * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * ((wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2 + (vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 2)) / 6 - (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 1, 2);
coeff = (vaFactorThree * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (uaMinus1FactorThree * (vaFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * vaFactorTwo * vb * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3))) / 36 + (ub * vaFactorThree * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (uaMinus1FactorThree * (vaFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + 3 * va * vbFactorTwo * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + 3 * vaFactorTwo * vb * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)))) / 36 + (ub * uaMinus1FactorTwo * (vaFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * vaFactorTwo * vb * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3))) / 12 + (ubFactorTwo * vaFactorThree * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (ua - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (uaMinus1FactorThree * ((vaFactorThree * wbFactorThree) / 2 - vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * va * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 1)) / 2)) / 36 - (ub * uaMinus1FactorTwo * (3 * va * vbFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (vaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * vaFactorTwo * vb * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 - (ubFactorThree * vaFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 36 - (ubFactorTwo * ((vaFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) * (ua - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (ub * uaMinus1FactorTwo * ((vaFactorThree * wbFactorThree) / 2 - vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * va * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 1)) / 2)) / 12 - (ubFactorTwo * (ua - 1) * (3 * va * vbFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (vaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * vaFactorTwo * vb * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 - (ubFactorThree * ((vaFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6))) / 36 + (vb * wb * uaMinus1FactorThree * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * vbFactorTwo * wa - vbFactorTwo - 3 * va * vb * wb + 9 * va * vb * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * (ua - 1) * ((vaFactorThree * wbFactorThree) / 2 - vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * va * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 1)) / 2)) / 12 - (ubFactorThree * (3 * va * vbFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (vaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * vaFactorTwo * vb * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 36 + (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (3 * va * wb - vb + 3 * vb * wa)) / 72 + (ub * vb * wb * uaMinus1FactorTwo * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * vbFactorTwo * wa - vbFactorTwo - 3 * va * vb * wb + 9 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * ((vaFactorThree * wbFactorThree) / 2 - vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * va * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * vaFactorTwo * vb * wbFactorTwo * (3 * wa - 1)) / 2)) / 36 + (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 72 + (ubFactorTwo * vb * wb * (ua - 1) * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * vbFactorTwo * wa - vbFactorTwo - 3 * va * vb * wb + 9 * va * vb * wa * wb)) / 24 + (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (3 * va * wb - vb + 3 * vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * (vbFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * va * vbFactorTwo * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * vaFactorTwo * vb * wbFactorThree) / 2)) / 36 + (ubFactorTwo * (vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * va * vbFactorTwo * wbFactorThree) / 2) * (ua - 1)) / 12 + (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (ubFactorThree * (vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * va * vbFactorTwo * wbFactorThree) / 2)) / 36 + (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 2, -1);
coeff = (waFactorThree * uaMinus1FactorThree * vaMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = ((3 * ub * waFactorThree * uaMinus1FactorTwo + 3 * waFactorTwo * wb * uaMinus1FactorThree) * vaMinus1FactorThree) / 216 + (vb * waFactorThree * uaMinus1FactorThree * vaMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = (vaMinus1FactorThree * (3 * ubFactorTwo * waFactorThree * (ua - 1) + 3 * wa * wbFactorTwo * uaMinus1FactorThree + 9 * ub * waFactorTwo * wb * uaMinus1FactorTwo)) / 216 + (vb * (3 * ub * waFactorThree * uaMinus1FactorTwo + 3 * waFactorTwo * wb * uaMinus1FactorThree) * vaMinus1FactorTwo) / 72 + (vbFactorTwo * waFactorThree * uaMinus1FactorThree * (va - 1)) / 72;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * (ubFactorThree * waFactorThree + wbFactorThree * uaMinus1FactorThree + 9 * ub * wa * wbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * waFactorTwo * wb * (ua - 1))) / 216 + (vbFactorTwo * (3 * ub * waFactorThree * uaMinus1FactorTwo + 3 * waFactorTwo * wb * uaMinus1FactorThree) * (va - 1)) / 72 + (vbFactorThree * waFactorThree * uaMinus1FactorThree) / 216 + (vb * vaMinus1FactorTwo * (3 * ubFactorTwo * waFactorThree * (ua - 1) + 3 * wa * wbFactorTwo * uaMinus1FactorThree + 9 * ub * waFactorTwo * wb * uaMinus1FactorTwo)) / 72;
out.coeff[3] += coeff * sample;
coeff = (vbFactorThree * (3 * ub * waFactorThree * uaMinus1FactorTwo + 3 * waFactorTwo * wb * uaMinus1FactorThree)) / 216 + (vaMinus1FactorThree * (3 * ubFactorThree * waFactorTwo * wb + 3 * ub * wbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * wa * wbFactorTwo * (ua - 1))) / 216 + (vbFactorTwo * (va - 1) * (3 * ubFactorTwo * waFactorThree * (ua - 1) + 3 * wa * wbFactorTwo * uaMinus1FactorThree + 9 * ub * waFactorTwo * wb * uaMinus1FactorTwo)) / 72 + (vb * vaMinus1FactorTwo * (ubFactorThree * waFactorThree + wbFactorThree * uaMinus1FactorThree + 9 * ub * wa * wbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * waFactorTwo * wb * (ua - 1))) / 72;
out.coeff[4] += coeff * sample;
coeff = ((3 * ubFactorThree * wa * wbFactorTwo + 3 * ubFactorTwo * wbFactorThree * (ua - 1)) * vaMinus1FactorThree) / 216 + (vbFactorThree * (3 * ubFactorTwo * waFactorThree * (ua - 1) + 3 * wa * wbFactorTwo * uaMinus1FactorThree + 9 * ub * waFactorTwo * wb * uaMinus1FactorTwo)) / 216 + (vb * vaMinus1FactorTwo * (3 * ubFactorThree * waFactorTwo * wb + 3 * ub * wbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * wa * wbFactorTwo * (ua - 1))) / 72 + (vbFactorTwo * (va - 1) * (ubFactorThree * waFactorThree + wbFactorThree * uaMinus1FactorThree + 9 * ub * wa * wbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * waFactorTwo * wb * (ua - 1))) / 72;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * (ubFactorThree * waFactorThree + wbFactorThree * uaMinus1FactorThree + 9 * ub * wa * wbFactorTwo * uaMinus1FactorTwo + 9 * ubFactorTwo * waFactorTwo * wb * (ua - 1))) / 216 + (vbFactorTwo * (va - 1) * (3 * ubFactorThree * waFactorTwo * wb + 3 * ub * wbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * wa * wbFactorTwo * (ua - 1))) / 72 + (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 216 + (vb * (3 * ubFactorThree * wa * wbFactorTwo + 3 * ubFactorTwo * wbFactorThree * (ua - 1)) * vaMinus1FactorTwo) / 72;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * (3 * ubFactorThree * waFactorTwo * wb + 3 * ub * wbFactorThree * uaMinus1FactorTwo + 9 * ubFactorTwo * wa * wbFactorTwo * (ua - 1))) / 216 + (vbFactorTwo * (3 * ubFactorThree * wa * wbFactorTwo + 3 * ubFactorTwo * wbFactorThree * (ua - 1)) * (va - 1)) / 72 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 72;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (3 * ubFactorThree * wa * wbFactorTwo + 3 * ubFactorTwo * wbFactorThree * (ua - 1))) / 216 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 2, 0);
coeff = -(waFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * uaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -(uaMinus1FactorThree * (waFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * waFactorTwo * wb * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3))) / 36 - (ub * waFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * uaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(uaMinus1FactorThree * (waFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + 3 * wa * wbFactorTwo * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) + 3 * waFactorTwo * wb * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)))) / 36 - (ub * uaMinus1FactorTwo * (waFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * waFactorTwo * wb * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3))) / 12 - (ubFactorTwo * waFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * (ua - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(uaMinus1FactorThree * (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (vbFactorThree * waFactorThree) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 2)) / 2 + (3 * va * vb * wa * wbFactorTwo * (3 * va - 4)) / 2)) / 36 - (ubFactorThree * waFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 36 - (ub * uaMinus1FactorTwo * ((vbFactorTwo * waFactorThree * (3 * va - 2)) / 2 + 3 * wa * wbFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * va * vb * waFactorTwo * wb * (3 * va - 4)) / 2)) / 12 - (ubFactorTwo * waFactorTwo * (ua - 1) * (4 * wb - 6 * vaFactorTwo * wb + 3 * vaFactorThree * wb + 3 * vaFactorTwo * vb * wa - 4 * va * vb * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(ubFactorThree * waFactorTwo * (4 * wb - 6 * vaFactorTwo * wb + 3 * vaFactorThree * wb + 3 * vaFactorTwo * vb * wa - 4 * va * vb * wa)) / 72 - (ubFactorTwo * (ua - 1) * ((vbFactorTwo * waFactorThree * (3 * va - 2)) / 2 + 3 * wa * wbFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * va * vb * waFactorTwo * wb * (3 * va - 4)) / 2)) / 12 - (ub * uaMinus1FactorTwo * (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (vbFactorThree * waFactorThree) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 2)) / 2 + (3 * va * vb * wa * wbFactorTwo * (3 * va - 4)) / 2)) / 12 - (vb * wb * uaMinus1FactorThree * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * va * wbFactorTwo - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(ubFactorThree * ((vbFactorTwo * waFactorThree * (3 * va - 2)) / 2 + 3 * wa * wbFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * va * vb * waFactorTwo * wb * (3 * va - 4)) / 2)) / 36 - (ubFactorTwo * (ua - 1) * (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (vbFactorThree * waFactorThree) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 2)) / 2 + (3 * va * vb * wa * wbFactorTwo * (3 * va - 4)) / 2)) / 12 - (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (3 * va * wb - 2 * wb + 3 * vb * wa)) / 72 - (ub * vb * wb * uaMinus1FactorTwo * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * va * wbFactorTwo - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(ubFactorThree * (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (vbFactorThree * waFactorThree) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 2)) / 2 + (3 * va * vb * wa * wbFactorTwo * (3 * va - 4)) / 2)) / 36 - (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 72 - (ubFactorTwo * vb * wb * (ua - 1) * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * va * wbFactorTwo - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 24 - (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (3 * va * wb - 2 * wb + 3 * vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ubFactorThree * vb * wb * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 4 * va * wbFactorTwo - 6 * vb * wa * wb + 9 * va * vb * wa * wb)) / 72 - (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (3 * va * wb - 2 * wb + 3 * vb * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * (wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + (3 * vbFactorThree * wa * wbFactorTwo) / 2)) / 36 - (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 2, 1);
coeff = (waFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (uaMinus1FactorThree * (waFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * waFactorTwo * wb * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 36 + (ub * waFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * uaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (uaMinus1FactorThree * (waFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + 3 * wa * wbFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + 3 * waFactorTwo * wb * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)))) / 36 + (ub * uaMinus1FactorTwo * (waFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * waFactorTwo * wb * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 12 + (ubFactorTwo * waFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (ua - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (uaMinus1FactorThree * ((vbFactorThree * waFactorThree) / 2 - wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * vb * wa * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 1)) / 2)) / 36 - (ub * uaMinus1FactorTwo * (3 * wa * wbFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * waFactorThree * (3 * va - 1)) / 2 + (3 * vb * waFactorTwo * wb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (ubFactorThree * waFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 36 - (ubFactorTwo * ((vb * waFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) * (ua - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (ub * uaMinus1FactorTwo * ((vbFactorThree * waFactorThree) / 2 - wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * vb * wa * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 1)) / 2)) / 12 - (ubFactorTwo * (ua - 1) * (3 * wa * wbFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * waFactorThree * (3 * va - 1)) / 2 + (3 * vb * waFactorTwo * wb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (ubFactorThree * ((vb * waFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 36 + (vb * wb * uaMinus1FactorThree * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * va * wbFactorTwo - wbFactorTwo - 3 * vb * wa * wb + 9 * va * vb * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * (ua - 1) * ((vbFactorThree * waFactorThree) / 2 - wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * vb * wa * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 1)) / 2)) / 12 - (ubFactorThree * (3 * wa * wbFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (vbFactorTwo * waFactorThree * (3 * va - 1)) / 2 + (3 * vb * waFactorTwo * wb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 36 + (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (3 * va * wb - wb + 3 * vb * wa)) / 72 + (ub * vb * wb * uaMinus1FactorTwo * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * va * wbFactorTwo - wbFactorTwo - 3 * vb * wa * wb + 9 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * ((vbFactorThree * waFactorThree) / 2 - wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * vb * wa * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * vbFactorTwo * waFactorTwo * wb * (3 * va - 1)) / 2)) / 36 + (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 72 + (ubFactorTwo * vb * wb * (ua - 1) * (3 * vaFactorTwo * wbFactorTwo + 3 * vbFactorTwo * waFactorTwo - 2 * va * wbFactorTwo - wbFactorTwo - 3 * vb * wa * wb + 9 * va * vb * wa * wb)) / 24 + (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (3 * va * wb - wb + 3 * vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * (wbFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * wa * wbFactorTwo * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * vbFactorThree * waFactorTwo * wb) / 2)) / 36 + (ubFactorTwo * (wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * vbFactorThree * wa * wbFactorTwo) / 2) * (ua - 1)) / 12 + (ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (ubFactorThree * (wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * vbFactorThree * wa * wbFactorTwo) / 2)) / 36 + (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(-1, 2, 2);
coeff = -(vaFactorThree * waFactorThree * uaMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = -((3 * vaFactorTwo * vb * waFactorThree + 3 * vaFactorThree * waFactorTwo * wb) * uaMinus1FactorThree) / 216 - (ub * vaFactorThree * waFactorThree * uaMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = -(va * wa * uaMinus1FactorThree * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 72 - (ubFactorTwo * vaFactorThree * waFactorThree * (ua - 1)) / 72 - (ub * vaFactorTwo * waFactorTwo * uaMinus1FactorTwo * (va * wb + vb * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = -(uaMinus1FactorThree * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 216 - (ubFactorThree * vaFactorThree * waFactorThree) / 216 - (ub * va * wa * uaMinus1FactorTwo * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 - (ubFactorTwo * vaFactorTwo * waFactorTwo * (ua - 1) * (va * wb + vb * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(ub * uaMinus1FactorTwo * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 - (vb * wb * uaMinus1FactorThree * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 72 - (ubFactorThree * vaFactorTwo * waFactorTwo * (va * wb + vb * wa)) / 72 - (ubFactorTwo * va * wa * (ua - 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = -(ubFactorTwo * (ua - 1) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 - (vbFactorTwo * wbFactorTwo * uaMinus1FactorThree * (va * wb + vb * wa)) / 72 - (ubFactorThree * va * wa * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 72 - (ub * vb * wb * uaMinus1FactorTwo * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(ubFactorThree * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 216 - (vbFactorThree * wbFactorThree * uaMinus1FactorThree) / 216 - (ubFactorTwo * vb * wb * (ua - 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 - (ub * vbFactorTwo * wbFactorTwo * uaMinus1FactorTwo * (va * wb + vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vbFactorThree * wbFactorThree * uaMinus1FactorTwo) / 72 - (ubFactorThree * vb * wb * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 72 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (ua - 1) * (va * wb + vb * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * (3 * va * vbFactorTwo * wbFactorThree + 3 * vbFactorThree * wa * wbFactorTwo)) / 216 - (ubFactorTwo * vbFactorThree * wbFactorThree * (ua - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(0, -1, -1);
coeff = (((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * vaMinus1FactorThree * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (waMinus1FactorThree * (3 * vb * vaMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (ua * ub * (3 * ua - 4) * vaMinus1FactorThree) / 2)) / 36 + (wb * vaMinus1FactorThree * waMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * ((ubFactorTwo * (3 * ua - 2) * vaMinus1FactorThree) / 2 + 3 * vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vb * (3 * ua - 4) * vaMinus1FactorTwo) / 2)) / 36 + (wb * waMinus1FactorTwo * (3 * vb * vaMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (ua * ub * (3 * ua - 4) * vaMinus1FactorThree) / 2)) / 12 + (wbFactorTwo * vaMinus1FactorThree * (wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * ((ubFactorThree * vaMinus1FactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vb * (3 * ua - 2) * vaMinus1FactorTwo) / 2 + (3 * ua * ub * vbFactorTwo * (3 * ua - 4) * (va - 1)) / 2)) / 36 + (wb * waMinus1FactorTwo * ((ubFactorTwo * (3 * ua - 2) * vaMinus1FactorThree) / 2 + 3 * vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vb * (3 * ua - 4) * vaMinus1FactorTwo) / 2)) / 12 + (wbFactorThree * vaMinus1FactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 36 + (wbFactorTwo * (wa - 1) * (3 * vb * vaMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (ua * ub * (3 * ua - 4) * vaMinus1FactorThree) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * (3 * vb * vaMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (ua * ub * (3 * ua - 4) * vaMinus1FactorThree) / 2)) / 36 + (waMinus1FactorThree * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (va - 1)) / 2 + (ua * ub * vbFactorThree * (3 * ua - 4)) / 2)) / 36 + (wbFactorTwo * (wa - 1) * ((ubFactorTwo * (3 * ua - 2) * vaMinus1FactorThree) / 2 + 3 * vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vb * (3 * ua - 4) * vaMinus1FactorTwo) / 2)) / 12 + (wb * waMinus1FactorTwo * ((ubFactorThree * vaMinus1FactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vb * (3 * ua - 2) * vaMinus1FactorTwo) / 2 + (3 * ua * ub * vbFactorTwo * (3 * ua - 4) * (va - 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * vaMinus1FactorThree) / 2 + 3 * vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vb * (3 * ua - 4) * vaMinus1FactorTwo) / 2)) / 36 + (wbFactorTwo * (wa - 1) * ((ubFactorThree * vaMinus1FactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vb * (3 * ua - 2) * vaMinus1FactorTwo) / 2 + (3 * ua * ub * vbFactorTwo * (3 * ua - 4) * (va - 1)) / 2)) / 12 + (wb * waMinus1FactorTwo * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (va - 1)) / 2 + (ua * ub * vbFactorThree * (3 * ua - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 72;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * vaMinus1FactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vb * (3 * ua - 2) * vaMinus1FactorTwo) / 2 + (3 * ua * ub * vbFactorTwo * (3 * ua - 4) * (va - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 + (wbFactorTwo * (wa - 1) * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (va - 1)) / 2 + (ua * ub * vbFactorThree * (3 * ua - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (va - 1)) / 2 + (ua * ub * vbFactorThree * (3 * ua - 4)) / 2)) / 36 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (3 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * vbFactorTwo * (va - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(0, -1, 0);
coeff = -(((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * waMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 6 - (wb * waMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 6 - (wb * waMinus1FactorTwo * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 - (wbFactorTwo * (wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 6 - (wb * waMinus1FactorTwo * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 6 - (wbFactorTwo * (wa - 1) * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2;
out.coeff[3] += coeff * sample;
coeff = -(wbFactorThree * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 6 - (wbFactorTwo * (wa - 1) * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2 - (wb * waMinus1FactorTwo * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (ub * vb * waMinus1FactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 24 - (wbFactorTwo * (wa - 1) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 6 - (ub * vb * wb * waMinus1FactorTwo * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8;
out.coeff[5] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 24 - (wbFactorThree * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 6 - (ub * vb * wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8;
out.coeff[6] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2))) / 2 + (ubFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2))) / 2 + ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo))) / 6 - (wbFactorTwo * (wa - 1) * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2)) / 2 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 8;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2)) / 6 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, -1, 1);
coeff = (((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * waMinus1FactorThree) / 6 + (wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 - (wb * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * waMinus1FactorTwo) / 2 - (wbFactorTwo * (wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 6 - (wb * waMinus1FactorTwo * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wbFactorTwo * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * (wa - 1)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (waMinus1FactorThree * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 6 - (wbFactorThree * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (wbFactorTwo * (wa - 1) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wb * waMinus1FactorTwo * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wb * waMinus1FactorTwo * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2 - (wbFactorTwo * (wa - 1) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 - (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 24 - (wbFactorThree * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 6 + (wbFactorTwo * (wa - 1) * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 6 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 6 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, -1, 2);
coeff = -(vaFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((vaFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * vaFactorTwo * vb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) * waMinus1FactorThree) / 36 - (vaFactorThree * wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * (vaFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + 3 * va * vbFactorTwo * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) + 3 * vaFactorTwo * vb * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)))) / 36 - (wb * (vaFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * vaFactorTwo * vb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) * waMinus1FactorTwo) / 12 - (vaFactorThree * wbFactorTwo * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 36 - (vaFactorThree * wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 36 - (wb * waMinus1FactorTwo * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 - (vaFactorTwo * wbFactorTwo * (wa - 1) * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(vaFactorTwo * wbFactorThree * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 72 - (wbFactorTwo * (wa - 1) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 - (wb * waMinus1FactorTwo * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ub * vb * waMinus1FactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(wbFactorThree * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 36 - (wbFactorTwo * (wa - 1) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 72 - (ub * vb * wb * waMinus1FactorTwo * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 36 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 - (ub * vb * wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 72 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 36 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(0, 0, -1);
coeff = -(((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * vaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ua * ub * (3 * ua - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 6 - (vb * vaMinus1FactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ubFactorTwo * (3 * ua - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wa * wb * (3 * ua - 4) * (3 * wa - 4)) / 4)) / 6 - (vb * vaMinus1FactorTwo * ((ua * ub * (3 * ua - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 - (vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 2)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 2) * (3 * wa - 4)) / 4)) / 6 - (vbFactorTwo * (va - 1) * ((ua * ub * (3 * ua - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 - (vb * vaMinus1FactorTwo * ((ubFactorTwo * (3 * ua - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wa * wb * (3 * ua - 4) * (3 * wa - 4)) / 4)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 6;
out.coeff[3] += coeff * sample;
coeff = -(vbFactorThree * ((ua * ub * (3 * ua - 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 6 - (vbFactorTwo * (va - 1) * ((ubFactorTwo * (3 * ua - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wa * wb * (3 * ua - 4) * (3 * wa - 4)) / 4)) / 2 - (vb * vaMinus1FactorTwo * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 2)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 2) * (3 * wa - 4)) / 4)) / 2 - (ub * wb * vaMinus1FactorThree * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo + 4 * ub * wb - 4 * ua * wbFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (2 * ub + 2 * wb - 3 * ua * wb - 3 * ub * wa)) / 24 - (vbFactorTwo * (va - 1) * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 2)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 2) * (3 * wa - 4)) / 4)) / 2 - (vbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wa * wb * (3 * ua - 4) * (3 * wa - 4)) / 4)) / 6 - (ub * vb * wb * vaMinus1FactorTwo * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo + 4 * ub * wb - 4 * ua * wbFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 8;
out.coeff[5] += coeff * sample;
coeff = (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (2 * ub + 2 * wb - 3 * ua * wb - 3 * ub * wa)) / 8 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 24 - (vbFactorThree * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 2)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 2) * (3 * wa - 4)) / 4)) / 6 - (ub * vbFactorTwo * wb * (va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo + 4 * ub * wb - 4 * ua * wbFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 8;
out.coeff[6] += coeff * sample;
coeff = -(vbFactorThree * ((wbFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2))) / 2 + (ubFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2))) / 2 + ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo))) / 6 - (vbFactorTwo * (va - 1) * ((wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2)) / 2 - (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 8;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * ((wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2)) / 6 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 0, 0);
coeff = ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[1] += coeff * sample;
coeff = ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wa * wb * (3 * wa - 4) * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[2] += coeff * sample;
coeff = (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4) + (wbFactorTwo * (3 * wa - 2) * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2 + (ub * vb * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 4 + (wa * wb * (3 * wa - 4) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 4 + (ub * vb * wa * wb * (3 * wa - 4) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 + (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 4 + (ub * vb * wbFactorTwo * (3 * wa - 2) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8 - (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2) + (wbFactorThree * ((vbFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2))) / 2 + (ubFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2))) / 2 + ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo))) / 2 + (ubFactorThree * vbFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2))) / 4;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2)) / 2 + (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 4;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(0, 0, 1);
coeff = -((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = -(((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) - ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3);
out.coeff[1] += coeff * sample;
coeff = (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4) + (wa * wb * (3 * wa - 4) * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 2 + (wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4) + (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 2 + (wa * wb * (3 * wa - 4) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 2 - ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorTwo * (3 * wa - 2) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (wa * wb * (3 * wa - 4) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 + (ubFactorTwo * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 4 - (wa * wb * (3 * wa - 4) * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 - (wbFactorTwo * (3 * wa - 2) * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2 - (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 4 + (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8 - (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 8 - (wbFactorThree * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 2 - (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 4;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(0, 0, 2);
coeff = (vaFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (vaFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * vaFactorTwo * vb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3))) / 6 + (vaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 6 + (vaFactorThree * wbFactorTwo * (3 * wa - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (vaFactorTwo * wa * wb * (3 * wa - 4) * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 6 + (vaFactorThree * wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (wa * wb * (3 * wa - 4) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 + (vaFactorTwo * wbFactorTwo * (3 * wa - 2) * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24;
out.coeff[3] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 2) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 + (vaFactorTwo * wbFactorThree * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24 + (ub * vb * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 12 + (wa * wb * (3 * wa - 4) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 + (wbFactorTwo * (3 * wa - 2) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 + (ubFactorTwo * vbFactorTwo * (3 * ua * vb - 2 * vb + 3 * ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (ub * vb * wa * wb * (3 * wa - 4) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 + (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (ub * vb * wbFactorTwo * (3 * wa - 2) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 12 + (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 1, -1);
coeff = (((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * vaMinus1FactorThree) / 6 + (vb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ubFactorTwo * (3 * ua - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wb * (3 * ua - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 - (vb * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2) * vaMinus1FactorTwo) / 2 - (vbFactorTwo * (va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * wb * (3 * ua - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 1)) / 4)) / 6 - (vb * vaMinus1FactorTwo * ((ubFactorTwo * (3 * ua - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wb * (3 * ua - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 - (vbFactorTwo * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2) * (va - 1)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (vaMinus1FactorThree * ((ua * ub * wbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 2) * (3 * wa - 1)) / 4)) / 6 - (vbFactorThree * ((wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (vbFactorTwo * (va - 1) * ((ubFactorTwo * (3 * ua - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wb * (3 * ua - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 - (vb * vaMinus1FactorTwo * ((ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * wb * (3 * ua - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (vb * vaMinus1FactorTwo * ((ua * ub * wbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 2) * (3 * wa - 1)) / 4)) / 2 - (vbFactorTwo * (va - 1) * ((ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * wb * (3 * ua - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 1)) / 4)) / 2 - (vbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * wb * (3 * ua - 4) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (ub + 2 * wb - 3 * ua * wb - 3 * ub * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 24 - (vbFactorThree * ((ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * wb * (3 * ua - 2) * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ua * ub * wbFactorTwo * (3 * ua - 4) * (3 * wa - 1)) / 4)) / 6 + (vbFactorTwo * (va - 1) * ((ua * ub * wbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 2) * (3 * wa - 1)) / 4)) / 2 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (ub + 2 * wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * ((ua * ub * wbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 2) * (3 * wa - 1)) / 4)) / 6 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (ub + 2 * wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * ((wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 2)) / 6 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 1, 0);
coeff = -((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[1] += coeff * sample;
coeff = ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[2] += coeff * sample;
coeff = ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 + (wb * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (wbFactorThree * ((ua * ub * (3 * ua - 4) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2)) / 2 - (wbFactorTwo * (3 * wa - 1) * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2 + (ub * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 4;
out.coeff[4] += coeff * sample;
coeff = (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8 - (wbFactorTwo * (3 * wa - 1) * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 - (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (vbFactorTwo * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * va * vb * (3 * ua - 4) * (3 * va - 4)) / 4)) / 2;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 - (wbFactorThree * ((vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 2)) / 4 + (ubFactorTwo * va * vb * (3 * ua - 2) * (3 * va - 4)) / 4)) / 2 - (ub * vb * wbFactorTwo * (3 * wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo + 4 * ub * vb - 4 * ua * vbFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 8 - (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (2 * ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = -(wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2) - (wbFactorThree * ((vbFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2))) / 2 + (ubFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2))) / 2 + ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo))) / 2 - (ubFactorThree * vbFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 4;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2)) / 2 - (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 4;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(0, 1, 1);
coeff = ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = (((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1));
out.coeff[1] += coeff * sample;
coeff = ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 - (wbFactorThree * ((vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * (3 * ua - 4) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2)) / 2 - ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 - (wbFactorTwo * (3 * wa - 1) * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 - (wb * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorThree * ((ubFactorTwo * (3 * ua - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ua * ub * vb * (3 * ua - 4) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[5] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 1) * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2 - (wbFactorThree * ((ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 2 + (ubFactorTwo * vb * (3 * ua - 2) * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ua * ub * vbFactorTwo * (3 * ua - 4) * (3 * va - 1)) / 4)) / 2 - (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 + (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ua * ub * vbFactorThree * (3 * ua - 4)) / 4 - (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 2) * (3 * va - 1)) / 4)) / 2 - (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (ub + 2 * vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 2 + (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 4;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(0, 1, 2);
coeff = -(vaFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (vaFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * vaFactorTwo * vb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3))) / 6 - (vaFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = (((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 - (vaFactorThree * wbFactorTwo * (3 * wa - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (vaFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 6 + (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 - (vaFactorThree * wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 - (vaFactorTwo * wbFactorTwo * (3 * wa - 1) * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 - (vaFactorTwo * wbFactorThree * (4 * vb - 6 * uaFactorTwo * vb + 3 * uaFactorThree * vb + 3 * uaFactorTwo * ub * va - 4 * ua * ub * va)) / 24 + (ub * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * (3 * ua * vb - 2 * vb + 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (wbFactorThree * ((ubFactorTwo * vaFactorThree * (3 * ua - 2)) / 2 + 3 * va * vbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * vaFactorTwo * vb * (3 * ua - 4)) / 2)) / 12 + (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 + vbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 2)) / 2 + (3 * ua * ub * va * vbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ub * vb * wbFactorTwo * (3 * wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 24 - (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ua * vbFactorTwo - 6 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (3 * ua * vb - 2 * vb + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (vbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 12 - (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 2, -1);
coeff = -(waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((waFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * waFactorTwo * wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) * vaMinus1FactorThree) / 36 - (vb * waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * vaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * (waFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + 3 * wa * wbFactorTwo * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) + 3 * waFactorTwo * wb * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)))) / 36 - (vb * (waFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * waFactorTwo * wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) * vaMinus1FactorTwo) / 12 - (vbFactorTwo * waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * (va - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 36 - (vbFactorThree * waFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 36 - (vb * vaMinus1FactorTwo * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 - (vbFactorTwo * waFactorTwo * (va - 1) * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(vbFactorThree * waFactorTwo * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 72 - (vbFactorTwo * (va - 1) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 - (vb * vaMinus1FactorTwo * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ub * wb * vaMinus1FactorThree * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(vbFactorThree * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 36 - (vbFactorTwo * (va - 1) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 72 - (ub * vb * wb * vaMinus1FactorTwo * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(vbFactorThree * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 36 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 - (ub * vbFactorTwo * wb * (va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 72 - (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 36 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(0, 2, 0);
coeff = (waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * (waFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * waFactorTwo * wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3))) / 6 + (waFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 6 + (vbFactorTwo * waFactorThree * (3 * va - 2) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (va * vb * waFactorTwo * (3 * va - 4) * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 6 + (vbFactorThree * waFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (va * vb * (3 * va - 4) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 + (vbFactorTwo * waFactorTwo * (3 * va - 2) * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = (vbFactorTwo * (3 * va - 2) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 + (vbFactorThree * waFactorTwo * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24 + (ub * wb * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 12 + (va * vb * (3 * va - 4) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 + (vbFactorTwo * (3 * va - 2) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 + (ubFactorTwo * wbFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 12 + (ub * va * vb * wb * (3 * va - 4) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 + (ubFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (ub * vbFactorTwo * wb * (3 * va - 2) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * va * vb * wbFactorTwo * (3 * va - 4) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 + (ubFactorThree * va * vb * wbFactorThree * (3 * va - 4)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 12 + (ubFactorThree * wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 2, 1);
coeff = -(waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (waFactorThree * ((uaFactorTwo * ub) / 2 + ua * ub * (ua - 2)) + 3 * waFactorTwo * wb * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3))) / 6 - (waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = (((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6 - (vbFactorTwo * waFactorThree * (3 * va - 1) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (vb * waFactorTwo * (2 * va - 3 * vaFactorTwo + 1) * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 6 + (vb * (2 * va - 3 * vaFactorTwo + 1) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 - (vbFactorThree * waFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 - (vbFactorTwo * waFactorTwo * (3 * va - 1) * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = (vb * (2 * va - 3 * vaFactorTwo + 1) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (vbFactorTwo * (3 * va - 1) * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 - (vbFactorThree * waFactorTwo * (4 * wb - 6 * uaFactorTwo * wb + 3 * uaFactorThree * wb + 3 * uaFactorTwo * ub * wa - 4 * ua * ub * wa)) / 24 + (ub * wb * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * wbFactorTwo * (3 * ua * wb - 2 * wb + 3 * ub * wa) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (vbFactorTwo * (3 * va - 1) * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (vbFactorThree * ((ubFactorTwo * waFactorThree * (3 * ua - 2)) / 2 + 3 * wa * wbFactorTwo * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ua * ub * waFactorTwo * wb * (3 * ua - 4)) / 2)) / 12 + (ub * vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (vbFactorThree * ((ubFactorThree * waFactorThree) / 2 + wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3) + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 2)) / 2 + (3 * ua * ub * wa * wbFactorTwo * (3 * ua - 4)) / 2)) / 12 - (ub * vbFactorTwo * wb * (3 * va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * vb * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 24 - (ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ua * wbFactorTwo - 6 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * ua * wb - 2 * wb + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 12 - (ubFactorThree * wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(0, 2, 2);
coeff = (vaFactorThree * waFactorThree * ((uaFactorTwo * (ua - 2)) / 2 + 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = (vaFactorTwo * waFactorTwo * (va * wb + vb * wa) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (ua * ub * vaFactorThree * waFactorThree * (3 * ua - 4)) / 72;
out.coeff[1] += coeff * sample;
coeff = (ubFactorTwo * vaFactorThree * waFactorThree * (3 * ua - 2)) / 72 + (va * wa * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (ua * ub * vaFactorTwo * waFactorTwo * (3 * ua - 4) * (va * wb + vb * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((uaFactorThree / 2 - uaFactorTwo + 2.f / 3) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 36 + (ubFactorThree * vaFactorThree * waFactorThree) / 72 + (ubFactorTwo * vaFactorTwo * waFactorTwo * (3 * ua - 2) * (va * wb + vb * wa)) / 24 + (ua * ub * va * wa * (3 * ua - 4) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (vb * wb * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (ubFactorThree * vaFactorTwo * waFactorTwo * (va * wb + vb * wa)) / 24 + (ua * ub * (3 * ua - 4) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 + (ubFactorTwo * va * wa * (3 * ua - 2) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * (3 * ua - 2) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 + (vbFactorTwo * wbFactorTwo * (va * wb + vb * wa) * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 12 + (ubFactorThree * va * wa * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 + (ua * ub * vb * wb * (3 * ua - 4) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 + (vbFactorThree * wbFactorThree * (uaFactorThree / 2 - uaFactorTwo + 2.f / 3)) / 36 + (ubFactorTwo * vb * wb * (3 * ua - 2) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 + (ua * ub * vbFactorTwo * wbFactorTwo * (3 * ua - 4) * (va * wb + vb * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vb * wb * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * ua - 2) * (va * wb + vb * wa)) / 24 + (ua * ub * vbFactorThree * wbFactorThree * (3 * ua - 4)) / 72;
out.coeff[7] += coeff * sample;
coeff = (ubFactorThree * (3 * va * vbFactorTwo * wbFactorThree + 3 * vbFactorThree * wa * wbFactorTwo)) / 72 + (vbFactorThree * wbFactorThree * ((ubFactorTwo * (ua - 2)) / 2 + ua * ubFactorTwo)) / 36;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(1, -1, -1);
coeff = -(((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((vaMinus1FactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) * waMinus1FactorThree) / 36 - (wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * ((ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) * vaMinus1FactorThree + 3 * vbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * (va - 1) + 3 * vb * vaMinus1FactorTwo * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)))) / 36 - (wb * (vaMinus1FactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) * waMinus1FactorTwo) / 12 - (wbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wbFactorThree * vaMinus1FactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 36 - (waMinus1FactorThree * ((ubFactorThree * vaMinus1FactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) + (3 * ubFactorTwo * vb * (3 * ua - 1) * vaMinus1FactorTwo) / 2 - (3 * ub * vbFactorTwo * (va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 36 + (wbFactorTwo * ((ub * vaMinus1FactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vb * vaMinus1FactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) * (wa - 1)) / 12 + (wb * waMinus1FactorTwo * (3 * vbFactorTwo * (va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * (3 * ua - 1) * vaMinus1FactorThree) / 2 + (3 * ub * vb * vaMinus1FactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((ub * vaMinus1FactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vb * vaMinus1FactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 36 - (waMinus1FactorThree * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (va - 1)) / 2)) / 36 + (wbFactorTwo * (wa - 1) * (3 * vbFactorTwo * (va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * (3 * ua - 1) * vaMinus1FactorThree) / 2 + (3 * ub * vb * vaMinus1FactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (wb * waMinus1FactorTwo * ((ubFactorThree * vaMinus1FactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) + (3 * ubFactorTwo * vb * (3 * ua - 1) * vaMinus1FactorTwo) / 2 - (3 * ub * vbFactorTwo * (va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * (3 * vbFactorTwo * (va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * (3 * ua - 1) * vaMinus1FactorThree) / 2 + (3 * ub * vb * vaMinus1FactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 36 - (wb * waMinus1FactorTwo * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (va - 1)) / 2)) / 12 - (wbFactorTwo * (wa - 1) * ((ubFactorThree * vaMinus1FactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) + (3 * ubFactorTwo * vb * (3 * ua - 1) * vaMinus1FactorTwo) / 2 - (3 * ub * vbFactorTwo * (va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 + (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 72;
out.coeff[5] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 24 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 - (wbFactorTwo * (wa - 1) * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (va - 1)) / 2)) / 12 - (wbFactorThree * ((ubFactorThree * vaMinus1FactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) + (3 * ubFactorTwo * vb * (3 * ua - 1) * vaMinus1FactorTwo) / 2 - (3 * ub * vbFactorTwo * (va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 36;
out.coeff[6] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (3 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 24 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (wbFactorThree * ((3 * ubFactorThree * vb * vaMinus1FactorTwo) / 2 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (va - 1)) / 2)) / 36;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * vbFactorTwo * (va - 1)) / 2)) / 36 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(1, -1, 0);
coeff = (((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * waMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1))) * waMinus1FactorThree) / 6 + (wb * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * waMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 6 - (wb * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * waMinus1FactorTwo) / 2 - (wbFactorTwo * (wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 6 - (wb * waMinus1FactorTwo * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 - (wbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (wa - 1)) / 2 - (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (waMinus1FactorThree * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 6 - (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (wbFactorTwo * (wa - 1) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 - (wb * waMinus1FactorTwo * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wb * waMinus1FactorTwo * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2 - (wbFactorTwo * (wa - 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 - (wbFactorThree * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 6 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 24 - (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 6 + (wbFactorTwo * (wa - 1) * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 6 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2)) / 6 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, -1, 1);
coeff = -(((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -((((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * waMinus1FactorThree) / 6 - (wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * (((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 - (wb * (((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * waMinus1FactorTwo) / 2 - (wbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (wa - 1)) / 2;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 - (wbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (wa - 1)) / 2 - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6 + (wb * waMinus1FactorTwo * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (waMinus1FactorThree * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 6 - (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 6 + (wbFactorTwo * (wa - 1) * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (wb * waMinus1FactorTwo * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 + (wb * waMinus1FactorTwo * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 + (wbFactorTwo * (wa - 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 6 + (wbFactorTwo * (wa - 1) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 24 + (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 6 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 8 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 6 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, -1, 2);
coeff = (vaFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (waMinus1FactorThree * (vaFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vaFactorTwo * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 36 + (vaFactorThree * wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * (vaFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + 3 * va * vbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + 3 * vaFactorTwo * vb * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)))) / 36 + (wb * waMinus1FactorTwo * (vaFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vaFactorTwo * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 12 + (vaFactorThree * wbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 36 - (wb * waMinus1FactorTwo * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (vaFactorThree * wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 36 - (wbFactorTwo * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) * (wa - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wb * waMinus1FactorTwo * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (wbFactorTwo * (wa - 1) * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (wbFactorThree * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 36 + (ub * vb * waMinus1FactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (wbFactorTwo * (wa - 1) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (wbFactorThree * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 36 + (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ua * vb - vb + 3 * ub * va)) / 72 + (ub * vb * wb * waMinus1FactorTwo * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 + (ub * vb * wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ua * vb - vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * (vbFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * va * vbFactorTwo * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * vaFactorTwo * vb) / 2)) / 36 + (wbFactorTwo * (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * va * vbFactorTwo) / 2) * (wa - 1)) / 12 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 36 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(1, 0, -1);
coeff = (((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = ((((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1))) * vaMinus1FactorThree) / 6 + (vb * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * ((wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (ub * wa * wb * (3 * wa - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 6 - (vb * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * vaMinus1FactorTwo) / 2 - (vbFactorTwo * (va - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ub * wbFactorTwo * (3 * wa - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 1) * (3 * wa - 4)) / 4)) / 6 - (vb * vaMinus1FactorTwo * ((wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (ub * wa * wb * (3 * wa - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 - (vbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (va - 1)) / 2 - (vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = (vaMinus1FactorThree * ((ubFactorThree * wa * wb * (3 * wa - 4)) / 4 - (ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 2)) / 4)) / 6 - (vbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (wa * wb * (3 * wa - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 6 - (vbFactorTwo * (va - 1) * ((wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (ub * wa * wb * (3 * wa - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 + (vb * vaMinus1FactorTwo * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ub * wbFactorTwo * (3 * wa - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 1) * (3 * wa - 4)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * (va - 1) * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ub * wbFactorTwo * (3 * wa - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 1) * (3 * wa - 4)) / 4)) / 2 - (vbFactorThree * ((wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 + (ub * wa * wb * (3 * wa - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 6 + (vb * vaMinus1FactorTwo * ((ubFactorThree * wa * wb * (3 * wa - 4)) / 4 - (ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 2)) / 4)) / 2 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (2 * ub + wb - 3 * ua * wb - 3 * ub * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 2 - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ub * wbFactorTwo * (3 * wa - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wa * wb * (3 * ua - 1) * (3 * wa - 4)) / 4)) / 6 + (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 24 + (vbFactorTwo * (va - 1) * ((ubFactorThree * wa * wb * (3 * wa - 4)) / 4 - (ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 2)) / 4)) / 2 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (2 * ub + wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * wa * wb * (3 * wa - 4)) / 4 - (ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 2)) / 4)) / 6 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (2 * ub + wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 2 + (wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2)) / 6 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 0, 0);
coeff = -((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = -(((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1))) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) - ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3);
out.coeff[1] += coeff * sample;
coeff = (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4) + (wa * wb * (3 * wa - 4) * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2 + (wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4) + (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2 + (wa * wb * (3 * wa - 4) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2 - ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorTwo * (3 * wa - 2) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 + (wa * wb * (3 * wa - 4) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 + (wbFactorTwo * (3 * wa - 2) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 + (ubFactorTwo * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 4 - (wa * wb * (3 * wa - 4) * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 - (wbFactorTwo * (3 * wa - 2) * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2 - (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 4 + (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8 - (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 8 - (wbFactorThree * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2)) / 2 - (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 4;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(1, 0, 1);
coeff = ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) + ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3);
out.coeff[1] += coeff * sample;
coeff = (wa * wb * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (3 * wa - 4)) / 2 - ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4) * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4) + (wbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (3 * wa - 2)) / 2 - (wa * wb * (3 * wa - 4) * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2 - (waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4) - (wbFactorTwo * (3 * wa - 2) * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wa * wb * (3 * wa - 4) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wbFactorTwo * (3 * wa - 2) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wa * wb * (3 * wa - 4) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 4;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 4 - (wbFactorTwo * (3 * wa - 2) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 - (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 8 - (wbFactorThree * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 2 + (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 4;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(1, 0, 2);
coeff = -(vaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (vaFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vaFactorTwo * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 - (vaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 6 + (wa * wb * (3 * wa - 4) * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 + (vaFactorThree * wbFactorTwo * (3 * wa - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 2) * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 6 + (vaFactorThree * wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 + (wa * wb * (3 * wa - 4) * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 + (wbFactorTwo * (3 * wa - 2) * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (ub * vb * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 12 - (wa * wb * (3 * wa - 4) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 2) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * (3 * ua * vb - vb + 3 * ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 - (ub * vb * wa * wb * (3 * wa - 4) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 - (ub * vb * wbFactorTwo * (3 * wa - 2) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (3 * ua * vb - vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (3 * ua * vb - vb + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 12 - (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 1, -1);
coeff = -(((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree) / 6;
out.coeff[0] += coeff * sample;
coeff = -((((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * vaMinus1FactorThree) / 6 - (vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) / 2;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * (((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 - (vb * (((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) * vaMinus1FactorTwo) / 2 - (vbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (va - 1)) / 2;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * ((wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (ub * wbFactorTwo * (3 * wa - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wb * (3 * ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 - (vbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (wb * (2 * wa - 3 * waFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (va - 1)) / 2 - (vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 + (vb * vaMinus1FactorTwo * ((wbFactorTwo * (3 * wa - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (ub * wb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (vaMinus1FactorThree * ((ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 1)) / 4)) / 6 - (vbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (wb * (2 * wa - 3 * waFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 6 + (vbFactorTwo * (va - 1) * ((wbFactorTwo * (3 * wa - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (ub * wb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 + (vb * vaMinus1FactorTwo * ((wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (ub * wbFactorTwo * (3 * wa - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wb * (3 * ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (vbFactorThree * ((wbFactorTwo * (3 * wa - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 - (ub * wb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 + (vb * vaMinus1FactorTwo * ((ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 1)) / 4)) / 2 + (vbFactorTwo * (va - 1) * ((wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (ub * wbFactorTwo * (3 * wa - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wb * (3 * ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 2 + (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (ub + wb - 3 * ua * wb - 3 * ub * wa)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 2 + (ub * wbFactorTwo * (3 * wa - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * wb * (3 * ua - 1) * (2 * wa - 3 * waFactorTwo + 1)) / 4)) / 6 + (vbFactorTwo * (va - 1) * ((ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 1)) / 4)) / 2 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 24 + (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (ub + wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * ((ub * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 4 - (ubFactorTwo * wbFactorTwo * (3 * ua - 1) * (3 * wa - 1)) / 4)) / 6 - (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 8 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (ub + wb - 3 * ua * wb - 3 * ub * wa)) / 8;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * ((wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2 + (ubFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 2)) / 6 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 8;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 1, 0);
coeff = ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = (((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1))) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1));
out.coeff[1] += coeff * sample;
coeff = ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2;
out.coeff[2] += coeff * sample;
coeff = ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) + (wb * (2 * wa - 3 * waFactorTwo + 1) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2 - (wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * (3 * wa - 1) * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 - (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (va * vb * (3 * va - 4) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2 - ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorTwo * (3 * wa - 1) * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * (2 * ub + vb - 3 * ua * vb - 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 - (wbFactorTwo * (3 * wa - 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 - (wb * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4) * (2 * wa - 3 * waFactorTwo + 1)) / 2 - (wbFactorThree * ((vbFactorTwo * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * va * vb * (3 * va - 4) * (2 * ua - 3 * uaFactorTwo + 1)) / 4)) / 2;
out.coeff[5] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 1) * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2 - (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 - (ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 2 + (ub * vbFactorTwo * (3 * va - 2) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 - (ubFactorTwo * va * vb * (3 * ua - 1) * (3 * va - 4)) / 4)) / 2 - (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 + (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * va * vb * (3 * va - 4)) / 4 - (ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 2)) / 4)) / 2 - (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 8 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (2 * ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 2 + (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2)) / 2 + (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 4;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(1, 1, 1);
coeff = -((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3);
out.coeff[0] += coeff * sample;
coeff = -(((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) - ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1));
out.coeff[1] += coeff * sample;
coeff = -(((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) - ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) - (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3);
out.coeff[2] += coeff * sample;
coeff = -((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (wbFactorTwo * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2) * (3 * wa - 1)) / 2 - (wb * (2 * wa - 3 * waFactorTwo + 1) * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2;
out.coeff[3] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 1) * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (wb * (2 * wa - 3 * waFactorTwo + 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wbFactorThree * ((ub * (2 * ua - 3 * uaFactorTwo + 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (vb * (2 * va - 3 * vaFactorTwo + 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2)) / 2;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorTwo * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorTwo * (3 * ua - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 - (ub * vb * (2 * ua - 3 * uaFactorTwo + 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (wbFactorTwo * (3 * wa - 1) * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 - (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 - (ubFactorTwo * vbFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 4;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 2 + (ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 2 + (ub * vbFactorTwo * (3 * va - 1) * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorTwo * vb * (3 * ua - 1) * (2 * va - 3 * vaFactorTwo + 1)) / 4)) / 2 + (wbFactorTwo * (3 * wa - 1) * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 + (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 4 - (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * ((ub * vbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 4 + (ubFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 4 - (ubFactorTwo * vbFactorTwo * (3 * ua - 1) * (3 * va - 1)) / 4)) / 2 + (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 8 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (ub + vb - 3 * ua * vb - 3 * ub * va)) / 8;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * ((vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 2 + (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 2)) / 2 - (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 4;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 8;
out.coeff[9] += coeff * sample;
sample = VALS(1, 1, 2);
coeff = (vaFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (vaFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * vaFactorTwo * vb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 + (vaFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 + (wb * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) * (2 * wa - 3 * waFactorTwo + 1)) / 12 - (vaFactorThree * wbFactorTwo * (3 * wa - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - (vaFactorThree * wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 - (((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = -(wbFactorThree * ((ub * vaFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * vaFactorTwo * vb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - (wb * (2 * wa - 3 * waFactorTwo + 1) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (ub * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 1) * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (wbFactorThree * (3 * va * vbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * vaFactorThree * (3 * ua - 1)) / 2 + (3 * ub * vaFactorTwo * vb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * (3 * ua * vb - vb + 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((ubFactorThree * vaFactorThree) / 2 - vbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * va * vbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * vaFactorTwo * vb * (3 * ua - 1)) / 2)) / 12 - (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 + (ub * vb * wbFactorTwo * (3 * wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * ua * vb - vb + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ua * vbFactorTwo - vbFactorTwo - 3 * ub * va * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (3 * ua * vb - vb + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (vbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * va * vbFactorTwo) / 2)) / 12 + (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 2, -1);
coeff = (waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (vaMinus1FactorThree * (waFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * waFactorTwo * wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 36 + (vb * waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (vaMinus1FactorThree * (waFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + 3 * wa * wbFactorTwo * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) + 3 * waFactorTwo * wb * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)))) / 36 + (vb * vaMinus1FactorTwo * (waFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * waFactorTwo * wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 12 + (vbFactorTwo * waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * (va - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 36 - (vb * vaMinus1FactorTwo * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (vbFactorThree * waFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 36 - (vbFactorTwo * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) * (va - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (vb * vaMinus1FactorTwo * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (vbFactorTwo * (va - 1) * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (vbFactorThree * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 36 + (ub * wb * vaMinus1FactorThree * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * (va - 1) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (vbFactorThree * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 36 + (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (3 * ua * wb - wb + 3 * ub * wa)) / 72 + (ub * vb * wb * vaMinus1FactorTwo * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 36 + (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 + (ub * vbFactorTwo * wb * (va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (3 * ua * wb - wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * (wbFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * wa * wbFactorTwo * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * waFactorTwo * wb) / 2)) / 36 + (vbFactorTwo * (wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * wa * wbFactorTwo) / 2) * (va - 1)) / 12 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 36 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(1, 2, 0);
coeff = -(waFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * (waFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * waFactorTwo * wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 - (waFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 6 + (va * vb * (3 * va - 4) * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 + (vbFactorTwo * waFactorThree * (3 * va - 2) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vbFactorTwo * (3 * va - 2) * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - ((vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 6 + (vbFactorThree * waFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 + (va * vb * (3 * va - 4) * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (vbFactorThree * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 + (vbFactorTwo * (3 * va - 2) * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (va * vb * (3 * va - 4) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (ub * wb * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (vbFactorThree * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (vbFactorTwo * (3 * va - 2) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (ubFactorTwo * wbFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (3 * ua * wb - wb + 3 * ub * wa)) / 12 - (ub * va * vb * wb * (3 * va - 4) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(vbFactorThree * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (ubFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 - (ub * vbFactorTwo * wb * (3 * va - 2) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * va * vb * wbFactorTwo * (3 * va - 4) * (3 * ua * wb - wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorThree * va * vb * wbFactorThree * (3 * va - 4)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 2) * (3 * ua * wb - wb + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 12 - (ubFactorThree * wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 2, 1);
coeff = (waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (waFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1)) + 3 * waFactorTwo * wb * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3))) / 6 + (waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3) * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6 + (vb * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) * (2 * va - 3 * vaFactorTwo + 1)) / 12 - (vbFactorTwo * waFactorThree * (3 * va - 1) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vb * (2 * va - 3 * vaFactorTwo + 1) * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (vbFactorTwo * (3 * va - 1) * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - (vbFactorThree * waFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 - (((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = -(vbFactorThree * ((ub * waFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + 3 * waFactorTwo * wb * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6))) / 12 - (vb * (2 * va - 3 * vaFactorTwo + 1) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (vbFactorTwo * (3 * va - 1) * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (ub * wb * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * (3 * va - 1) * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (vbFactorThree * (3 * wa * wbFactorTwo * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (ubFactorTwo * waFactorThree * (3 * ua - 1)) / 2 + (3 * ub * waFactorTwo * wb * (2 * ua - 3 * uaFactorTwo + 1)) / 2)) / 12 - (ubFactorTwo * wbFactorTwo * (3 * ua * wb - wb + 3 * ub * wa) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (ub * vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((ubFactorThree * waFactorThree) / 2 - wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6) - (3 * ub * wa * wbFactorTwo * (2 * ua - 3 * uaFactorTwo + 1)) / 2 + (3 * ubFactorTwo * waFactorTwo * wb * (3 * ua - 1)) / 2)) / 12 - (ubFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 + (ub * vbFactorTwo * wb * (3 * va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vb * wbFactorTwo * (2 * va - 3 * vaFactorTwo + 1) * (3 * ua * wb - wb + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ua * wbFactorTwo - wbFactorTwo - 3 * ub * wa * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorThree * vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 1) * (3 * ua * wb - wb + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2) + (3 * ubFactorThree * wa * wbFactorTwo) / 2)) / 12 + (ubFactorThree * wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(1, 2, 2);
coeff = -(vaFactorThree * waFactorThree * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = -((3 * vaFactorTwo * vb * waFactorThree + 3 * vaFactorThree * waFactorTwo * wb) * ((uaMinus1FactorTwo * (ua + 1)) / 2 - 2.f / 3)) / 36 - (vaFactorThree * waFactorThree * ((ub * uaMinus1FactorTwo) / 2 + ub * (ua - 1) * (ua + 1))) / 36;
out.coeff[1] += coeff * sample;
coeff = (va * wa * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 - (ubFactorTwo * vaFactorThree * waFactorThree * (3 * ua - 1)) / 72 + (ub * vaFactorTwo * waFactorTwo * (va * wb + vb * wa) * (2 * ua - 3 * uaFactorTwo + 1)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 36 - (ubFactorThree * vaFactorThree * waFactorThree) / 72 - (ubFactorTwo * vaFactorTwo * waFactorTwo * (3 * ua - 1) * (va * wb + vb * wa)) / 24 + (ub * va * wa * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (ub * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 + (vb * wb * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 - (ubFactorThree * vaFactorTwo * waFactorTwo * (va * wb + vb * wa)) / 24 - (ubFactorTwo * va * wa * (3 * ua - 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * wbFactorTwo * (va * wb + vb * wa) * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 12 - (ubFactorTwo * (3 * ua - 1) * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 - (ubFactorThree * va * wa * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 + (ub * vb * wb * (2 * ua - 3 * uaFactorTwo + 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * wbFactorThree * (ua / 2 + uaFactorTwo / 2 - uaFactorThree / 2 + 1.f / 6)) / 36 - (ubFactorThree * (vaFactorThree * wbFactorThree + vbFactorThree * waFactorThree + 9 * va * vbFactorTwo * waFactorTwo * wb + 9 * vaFactorTwo * vb * wa * wbFactorTwo)) / 72 - (ubFactorTwo * vb * wb * (3 * ua - 1) * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 + (ub * vbFactorTwo * wbFactorTwo * (va * wb + vb * wa) * (2 * ua - 3 * uaFactorTwo + 1)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vbFactorThree * wbFactorThree * (2 * ua - 3 * uaFactorTwo + 1)) / 72 - (ubFactorThree * vb * wb * (vaFactorTwo * wbFactorTwo + vbFactorTwo * waFactorTwo + 3 * va * vb * wa * wb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * ua - 1) * (va * wb + vb * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(ubFactorThree * (3 * va * vbFactorTwo * wbFactorThree + 3 * vbFactorThree * wa * wbFactorTwo)) / 72 - (vbFactorThree * wbFactorThree * (ubFactorTwo * (ua - 1) + (ubFactorTwo * (ua + 1)) / 2)) / 36;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, -1, -1);
coeff = (uaFactorThree * vaMinus1FactorThree * waMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = ((3 * uaFactorTwo * ub * vaMinus1FactorThree + 3 * uaFactorThree * vb * vaMinus1FactorTwo) * waMinus1FactorThree) / 216 + (uaFactorThree * wb * vaMinus1FactorThree * waMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * (3 * ua * ubFactorTwo * vaMinus1FactorThree + 3 * uaFactorThree * vbFactorTwo * (va - 1) + 9 * uaFactorTwo * ub * vb * vaMinus1FactorTwo)) / 216 + (wb * (3 * uaFactorTwo * ub * vaMinus1FactorThree + 3 * uaFactorThree * vb * vaMinus1FactorTwo) * waMinus1FactorTwo) / 72 + (uaFactorThree * wbFactorTwo * vaMinus1FactorThree * (wa - 1)) / 72;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaMinus1FactorThree + 9 * ua * ubFactorTwo * vb * vaMinus1FactorTwo + 9 * uaFactorTwo * ub * vbFactorTwo * (va - 1))) / 216 + (wbFactorTwo * (3 * uaFactorTwo * ub * vaMinus1FactorThree + 3 * uaFactorThree * vb * vaMinus1FactorTwo) * (wa - 1)) / 72 + (uaFactorThree * wbFactorThree * vaMinus1FactorThree) / 216 + (wb * waMinus1FactorTwo * (3 * ua * ubFactorTwo * vaMinus1FactorThree + 3 * uaFactorThree * vbFactorTwo * (va - 1) + 9 * uaFactorTwo * ub * vb * vaMinus1FactorTwo)) / 72;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * (3 * uaFactorTwo * ub * vaMinus1FactorThree + 3 * uaFactorThree * vb * vaMinus1FactorTwo)) / 216 + (waMinus1FactorThree * (3 * uaFactorTwo * ub * vbFactorThree + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ua * ubFactorTwo * vbFactorTwo * (va - 1))) / 216 + (wbFactorTwo * (wa - 1) * (3 * ua * ubFactorTwo * vaMinus1FactorThree + 3 * uaFactorThree * vbFactorTwo * (va - 1) + 9 * uaFactorTwo * ub * vb * vaMinus1FactorTwo)) / 72 + (wb * waMinus1FactorTwo * (uaFactorThree * vbFactorThree + ubFactorThree * vaMinus1FactorThree + 9 * ua * ubFactorTwo * vb * vaMinus1FactorTwo + 9 * uaFactorTwo * ub * vbFactorTwo * (va - 1))) / 72;
out.coeff[4] += coeff * sample;
coeff = ((3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * waMinus1FactorThree) / 216 + (wbFactorThree * (3 * ua * ubFactorTwo * vaMinus1FactorThree + 3 * uaFactorThree * vbFactorTwo * (va - 1) + 9 * uaFactorTwo * ub * vb * vaMinus1FactorTwo)) / 216 + (wb * waMinus1FactorTwo * (3 * uaFactorTwo * ub * vbFactorThree + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ua * ubFactorTwo * vbFactorTwo * (va - 1))) / 72 + (wbFactorTwo * (wa - 1) * (uaFactorThree * vbFactorThree + ubFactorThree * vaMinus1FactorThree + 9 * ua * ubFactorTwo * vb * vaMinus1FactorTwo + 9 * uaFactorTwo * ub * vbFactorTwo * (va - 1))) / 72;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaMinus1FactorThree + 9 * ua * ubFactorTwo * vb * vaMinus1FactorTwo + 9 * uaFactorTwo * ub * vbFactorTwo * (va - 1))) / 216 + (wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * ub * vbFactorThree + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ua * ubFactorTwo * vbFactorTwo * (va - 1))) / 72 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 216 + (wb * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * waMinus1FactorTwo) / 72;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * (3 * uaFactorTwo * ub * vbFactorThree + 3 * ubFactorThree * vb * vaMinus1FactorTwo + 9 * ua * ubFactorTwo * vbFactorTwo * (va - 1))) / 216 + (wbFactorTwo * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * vbFactorTwo * (va - 1)) * (wa - 1)) / 72 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 72;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * vbFactorTwo * (va - 1))) / 216 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(2, -1, 0);
coeff = -(uaFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -((uaFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * uaFactorTwo * ub * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3)) * waMinus1FactorThree) / 36 - (uaFactorThree * wb * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(waMinus1FactorThree * (uaFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + 3 * ua * ubFactorTwo * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) + 3 * uaFactorTwo * ub * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)))) / 36 - (wb * (uaFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * uaFactorTwo * ub * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3)) * waMinus1FactorTwo) / 12 - (uaFactorThree * wbFactorTwo * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 36 - (uaFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 36 - (wb * waMinus1FactorTwo * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 - (uaFactorTwo * wbFactorTwo * (wa - 1) * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(uaFactorTwo * wbFactorThree * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 72 - (wbFactorTwo * (wa - 1) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 - (wb * waMinus1FactorTwo * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 - (ub * vb * waMinus1FactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(wbFactorThree * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 36 - (wbFactorTwo * (wa - 1) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 72 - (ub * vb * wb * waMinus1FactorTwo * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 36 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 - (ub * vb * wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 72 - (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 36 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, -1, 1);
coeff = (uaFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (waMinus1FactorThree * (uaFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * uaFactorTwo * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 36 + (uaFactorThree * wb * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * waMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (waMinus1FactorThree * (uaFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + 3 * ua * ubFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) + 3 * uaFactorTwo * ub * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)))) / 36 + (wb * waMinus1FactorTwo * (uaFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * uaFactorTwo * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 12 + (uaFactorThree * wbFactorTwo * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * (wa - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (waMinus1FactorThree * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 36 - (wb * waMinus1FactorTwo * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (uaFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 36 - (wbFactorTwo * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) * (wa - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wb * waMinus1FactorTwo * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (wbFactorTwo * (wa - 1) * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (wbFactorThree * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 36 + (ub * vb * waMinus1FactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (wbFactorTwo * (wa - 1) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (wbFactorThree * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 36 + (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (3 * ua * vb - ub + 3 * ub * va)) / 72 + (ub * vb * wb * waMinus1FactorTwo * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 36 + (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 72 + (ub * vb * wbFactorTwo * (wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (3 * ua * vb - ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * ua * ubFactorTwo * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * uaFactorTwo * ub * vbFactorThree) / 2)) / 36 + (wbFactorTwo * (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * ua * ubFactorTwo * vbFactorThree) / 2) * (wa - 1)) / 12 + (ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 36 + (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, -1, 2);
coeff = -(uaFactorThree * vaFactorThree * waMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = -((3 * uaFactorTwo * ub * vaFactorThree + 3 * uaFactorThree * vaFactorTwo * vb) * waMinus1FactorThree) / 216 - (uaFactorThree * vaFactorThree * wb * waMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = -(ua * va * waMinus1FactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 - (uaFactorThree * vaFactorThree * wbFactorTwo * (wa - 1)) / 72 - (uaFactorTwo * vaFactorTwo * wb * waMinus1FactorTwo * (ua * vb + ub * va)) / 24;
out.coeff[2] += coeff * sample;
coeff = -(waMinus1FactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 216 - (uaFactorThree * vaFactorThree * wbFactorThree) / 216 - (ua * va * wb * waMinus1FactorTwo * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 - (uaFactorTwo * vaFactorTwo * wbFactorTwo * (wa - 1) * (ua * vb + ub * va)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(wb * waMinus1FactorTwo * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 - (ub * vb * waMinus1FactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 - (uaFactorTwo * vaFactorTwo * wbFactorThree * (ua * vb + ub * va)) / 72 - (ua * va * wbFactorTwo * (wa - 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[4] += coeff * sample;
coeff = -(wbFactorTwo * (wa - 1) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 - (ubFactorTwo * vbFactorTwo * waMinus1FactorThree * (ua * vb + ub * va)) / 72 - (ua * va * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 - (ub * vb * wb * waMinus1FactorTwo * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(wbFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 216 - (ubFactorThree * vbFactorThree * waMinus1FactorThree) / 216 - (ub * vb * wbFactorTwo * (wa - 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wb * waMinus1FactorTwo * (ua * vb + ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wb * waMinus1FactorTwo) / 72 - (ub * vb * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (wa - 1) * (ua * vb + ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * va * vbFactorTwo)) / 216 - (ubFactorThree * vbFactorThree * wbFactorTwo * (wa - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(2, 0, -1);
coeff = -(uaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = -(vaMinus1FactorThree * (uaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) + 3 * uaFactorTwo * ub * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3))) / 36 - (uaFactorThree * vb * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * vaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = -(vaMinus1FactorThree * (uaFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) + 3 * ua * ubFactorTwo * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) + 3 * uaFactorTwo * ub * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)))) / 36 - (vb * vaMinus1FactorTwo * (uaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) + 3 * uaFactorTwo * ub * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3))) / 12 - (uaFactorThree * vbFactorTwo * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (va - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = -(vaMinus1FactorThree * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (uaFactorThree * wbFactorThree) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * ua * ubFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 36 - (uaFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 36 - (vb * vaMinus1FactorTwo * ((uaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * ua * ubFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * wa * wb * (3 * wa - 4)) / 2)) / 12 - (uaFactorTwo * vbFactorTwo * (va - 1) * (4 * ub - 6 * ub * waFactorTwo + 3 * ub * waFactorThree + 3 * ua * waFactorTwo * wb - 4 * ua * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(uaFactorTwo * vbFactorThree * (4 * ub - 6 * ub * waFactorTwo + 3 * ub * waFactorThree + 3 * ua * waFactorTwo * wb - 4 * ua * wa * wb)) / 72 - (vbFactorTwo * (va - 1) * ((uaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * ua * ubFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * wa * wb * (3 * wa - 4)) / 2)) / 12 - (vb * vaMinus1FactorTwo * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (uaFactorThree * wbFactorThree) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * ua * ubFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ub * wb * vaMinus1FactorThree * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = -(vbFactorThree * ((uaFactorThree * wbFactorTwo * (3 * wa - 2)) / 2 + 3 * ua * ubFactorTwo * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * wa * wb * (3 * wa - 4)) / 2)) / 36 - (vbFactorTwo * (va - 1) * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (uaFactorThree * wbFactorThree) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * ua * ubFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 12 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (3 * ua * wb - 2 * ub + 3 * ub * wa)) / 72 - (ub * vb * wb * vaMinus1FactorTwo * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(vbFactorThree * (ubFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3) + (uaFactorThree * wbFactorThree) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 2)) / 2 + (3 * ua * ubFactorTwo * wa * wb * (3 * wa - 4)) / 2)) / 36 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 - (ub * vbFactorTwo * wb * (va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (3 * ua * wb - 2 * ub + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vbFactorThree * wb * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 4 * ubFactorTwo * wa - 6 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 72 - (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (3 * ua * wb - 2 * ub + 3 * ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (ubFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo) + (3 * ua * ubFactorTwo * wbFactorThree) / 2)) / 36 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 0, 0);
coeff = (uaFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (uaFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * uaFactorTwo * ub * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3))) / 6 + (uaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 6 + (uaFactorThree * wbFactorTwo * (3 * wa - 2) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * wa * wb * (3 * wa - 4) * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 6 + (uaFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (wa * wb * (3 * wa - 4) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 + (uaFactorTwo * wbFactorTwo * (3 * wa - 2) * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 2) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 + (uaFactorTwo * wbFactorThree * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24 + (ub * vb * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 12 + (wa * wb * (3 * wa - 4) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 + (wbFactorTwo * (3 * wa - 2) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 + (ubFactorTwo * vbFactorTwo * (3 * ua * vb - 2 * ub + 3 * ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (ub * vb * wa * wb * (3 * wa - 4) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 + (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (ub * vb * wbFactorTwo * (3 * wa - 2) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 12 + (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(2, 0, 1);
coeff = -(uaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((waFactorTwo * (wa - 2)) / 2 + 2.f / 3) * (uaFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * uaFactorTwo * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 6 - (uaFactorThree * ((waFactorTwo * wb) / 2 + wa * wb * (wa - 2)) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 6 + (wa * wb * (3 * wa - 4) * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 12 + (uaFactorThree * wbFactorTwo * (3 * wa - 2) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 2) * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 12 - ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 6 + (uaFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 + (wa * wb * (3 * wa - 4) * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12;
out.coeff[3] += coeff * sample;
coeff = (wbFactorThree * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 12 + (wbFactorTwo * (3 * wa - 2) * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (wa * wb * (3 * wa - 4) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (ub * vb * (waFactorThree / 2 - waFactorTwo + 2.f / 3) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorThree * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 2) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * (3 * ua * vb - ub + 3 * ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 - (ub * vb * wa * wb * (3 * wa - 4) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 - (ub * vb * wbFactorTwo * (3 * wa - 2) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (3 * ua * vb - ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (3 * ua * vb - ub + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 12 - (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(2, 0, 2);
coeff = (uaFactorThree * vaFactorThree * ((waFactorTwo * (wa - 2)) / 2 + 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = (uaFactorTwo * vaFactorTwo * (ua * vb + ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (uaFactorThree * vaFactorThree * wa * wb * (3 * wa - 4)) / 72;
out.coeff[1] += coeff * sample;
coeff = (uaFactorThree * vaFactorThree * wbFactorTwo * (3 * wa - 2)) / 72 + (ua * va * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * vaFactorTwo * wa * wb * (3 * wa - 4) * (ua * vb + ub * va)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((waFactorThree / 2 - waFactorTwo + 2.f / 3) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 36 + (uaFactorThree * vaFactorThree * wbFactorThree) / 72 + (uaFactorTwo * vaFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua * vb + ub * va)) / 24 + (ua * va * wa * wb * (3 * wa - 4) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (ub * vb * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * vaFactorTwo * wbFactorThree * (ua * vb + ub * va)) / 24 + (wa * wb * (3 * wa - 4) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ua * va * wbFactorTwo * (3 * wa - 2) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 2) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ubFactorTwo * vbFactorTwo * (ua * vb + ub * va) * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 12 + (ua * va * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ub * vb * wa * wb * (3 * wa - 4) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ubFactorThree * vbFactorThree * (waFactorThree / 2 - waFactorTwo + 2.f / 3)) / 36 + (ub * vb * wbFactorTwo * (3 * wa - 2) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wa * wb * (3 * wa - 4) * (ua * vb + ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vb * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 2) * (ua * vb + ub * va)) / 24 + (ubFactorThree * vbFactorThree * wa * wb * (3 * wa - 4)) / 72;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * va * vbFactorTwo)) / 72 + (ubFactorThree * vbFactorThree * ((wbFactorTwo * (wa - 2)) / 2 + wa * wbFactorTwo)) / 36;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 1, -1);
coeff = (uaFactorThree * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorThree) / 36;
out.coeff[0] += coeff * sample;
coeff = (vaMinus1FactorThree * (uaFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * uaFactorTwo * ub * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3))) / 36 + (uaFactorThree * vb * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * vaMinus1FactorTwo) / 12;
out.coeff[1] += coeff * sample;
coeff = (vaMinus1FactorThree * (uaFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + 3 * ua * ubFactorTwo * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) + 3 * uaFactorTwo * ub * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)))) / 36 + (vb * vaMinus1FactorTwo * (uaFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * uaFactorTwo * ub * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3))) / 12 + (uaFactorThree * vbFactorTwo * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (va - 1)) / 12;
out.coeff[2] += coeff * sample;
coeff = (vaMinus1FactorThree * ((uaFactorThree * wbFactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 1)) / 2)) / 36 - (vb * vaMinus1FactorTwo * (3 * ua * ubFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (uaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * uaFactorTwo * ub * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 - (uaFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 36 - (vbFactorTwo * ((uaFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) * (va - 1)) / 12;
out.coeff[3] += coeff * sample;
coeff = (vb * vaMinus1FactorTwo * ((uaFactorThree * wbFactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 1)) / 2)) / 12 - (vbFactorTwo * (va - 1) * (3 * ua * ubFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (uaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * uaFactorTwo * ub * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 12 - (vbFactorThree * ((uaFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6))) / 36 + (ub * wb * vaMinus1FactorThree * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ubFactorTwo * wa - ubFactorTwo - 3 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 72;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * (va - 1) * ((uaFactorThree * wbFactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 1)) / 2)) / 12 - (vbFactorThree * (3 * ua * ubFactorTwo * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (uaFactorThree * wbFactorTwo * (3 * wa - 1)) / 2 + (3 * uaFactorTwo * ub * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2)) / 36 + (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (3 * ua * wb - ub + 3 * ub * wa)) / 72 + (ub * vb * wb * vaMinus1FactorTwo * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ubFactorTwo * wa - ubFactorTwo - 3 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * ((uaFactorThree * wbFactorThree) / 2 - ubFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * wbFactorTwo * (3 * wa - 1)) / 2)) / 36 + (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 72 + (ub * vbFactorTwo * wb * (va - 1) * (3 * uaFactorTwo * wbFactorTwo + 3 * ubFactorTwo * waFactorTwo - 2 * ubFactorTwo * wa - ubFactorTwo - 3 * ua * ub * wb + 9 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (3 * ua * wb - ub + 3 * ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (vbFactorThree * (ubFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1)) + 3 * ua * ubFactorTwo * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * uaFactorTwo * ub * wbFactorThree) / 2)) / 36 + (vbFactorTwo * (ubFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * ua * ubFactorTwo * wbFactorThree) / 2) * (va - 1)) / 12 + (ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 24;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (ubFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2) + (3 * ua * ubFactorTwo * wbFactorThree) / 2)) / 36 + (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 24;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 1, 0);
coeff = -(uaFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = -(((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (uaFactorThree * ((vaFactorTwo * vb) / 2 + va * vb * (va - 2)) + 3 * uaFactorTwo * ub * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3))) / 6 - (uaFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = (((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 - (uaFactorThree * wbFactorTwo * (3 * wa - 1) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 6 + (wb * (2 * wa - 3 * waFactorTwo + 1) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 - (uaFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 - (uaFactorTwo * wbFactorTwo * (3 * wa - 1) * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 - (uaFactorTwo * wbFactorThree * (4 * ub - 6 * ub * vaFactorTwo + 3 * ub * vaFactorThree + 3 * ua * vaFactorTwo * vb - 4 * ua * va * vb)) / 24 + (ub * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * (3 * ua * vb - 2 * ub + 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 - (wbFactorThree * ((uaFactorThree * vbFactorTwo * (3 * va - 2)) / 2 + 3 * ua * ubFactorTwo * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * va * vb * (3 * va - 4)) / 2)) / 12 + (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 + ubFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3) + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 2)) / 2 + (3 * ua * ubFactorTwo * va * vb * (3 * va - 4)) / 2)) / 12 - (ub * vb * wbFactorTwo * (3 * wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 24 - (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 4 * ubFactorTwo * va - 6 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (3 * ua * vb - 2 * ub + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (ubFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 12 - (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(2, 1, 1);
coeff = (uaFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 6;
out.coeff[0] += coeff * sample;
coeff = (((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3) * (uaFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1)) + 3 * uaFactorTwo * ub * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3))) / 6 + (uaFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3) * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 6;
out.coeff[1] += coeff * sample;
coeff = ((3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6 + (wb * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) * (2 * wa - 3 * waFactorTwo + 1)) / 12 - (uaFactorThree * wbFactorTwo * (3 * wa - 1) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12;
out.coeff[2] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 12 - (uaFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 6;
out.coeff[3] += coeff * sample;
coeff = -(wbFactorThree * ((uaFactorThree * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + 3 * uaFactorTwo * ub * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6))) / 12 - (wb * (2 * wa - 3 * waFactorTwo + 1) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (wbFactorTwo * (3 * wa - 1) * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (ub * vb * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 12;
out.coeff[4] += coeff * sample;
coeff = (wbFactorTwo * (3 * wa - 1) * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (wbFactorThree * (3 * ua * ubFactorTwo * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (uaFactorThree * vbFactorTwo * (3 * va - 1)) / 2 + (3 * uaFactorTwo * ub * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2)) / 12 - (ubFactorTwo * vbFactorTwo * (3 * ua * vb - ub + 3 * ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * ((uaFactorThree * vbFactorThree) / 2 - ubFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6) - (3 * ua * ubFactorTwo * vb * (2 * va - 3 * vaFactorTwo + 1)) / 2 + (3 * uaFactorTwo * ub * vbFactorTwo * (3 * va - 1)) / 2)) / 12 - (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 + (ub * vb * wbFactorTwo * (3 * wa - 1) * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wb * (2 * wa - 3 * waFactorTwo + 1) * (3 * ua * vb - ub + 3 * ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vb * wbFactorThree * (3 * uaFactorTwo * vbFactorTwo + 3 * ubFactorTwo * vaFactorTwo - 2 * ubFactorTwo * va - ubFactorTwo - 3 * ua * ub * vb + 9 * ua * ub * va * vb)) / 24 - (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (3 * ua * vb - ub + 3 * ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (ubFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2) + (3 * ua * ubFactorTwo * vbFactorThree) / 2)) / 12 + (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 12;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 24;
out.coeff[9] += coeff * sample;
sample = VALS(2, 1, 2);
coeff = -(uaFactorThree * vaFactorThree * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = -((3 * uaFactorTwo * ub * vaFactorThree + 3 * uaFactorThree * vaFactorTwo * vb) * ((waMinus1FactorTwo * (wa + 1)) / 2 - 2.f / 3)) / 36 - (uaFactorThree * vaFactorThree * ((wb * waMinus1FactorTwo) / 2 + wb * (wa - 1) * (wa + 1))) / 36;
out.coeff[1] += coeff * sample;
coeff = (ua * va * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (uaFactorThree * vaFactorThree * wbFactorTwo * (3 * wa - 1)) / 72 + (uaFactorTwo * vaFactorTwo * wb * (ua * vb + ub * va) * (2 * wa - 3 * waFactorTwo + 1)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 36 - (uaFactorThree * vaFactorThree * wbFactorThree) / 72 - (uaFactorTwo * vaFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua * vb + ub * va)) / 24 + (ua * va * wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ub * vb * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (uaFactorTwo * vaFactorTwo * wbFactorThree * (ua * vb + ub * va)) / 24 - (ua * va * wbFactorTwo * (3 * wa - 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * vbFactorTwo * (ua * vb + ub * va) * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 12 - (wbFactorTwo * (3 * wa - 1) * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 - (ua * va * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ub * vb * wb * (2 * wa - 3 * waFactorTwo + 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * (wa / 2 + waFactorTwo / 2 - waFactorThree / 2 + 1.f / 6)) / 36 - (wbFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 - (ub * vb * wbFactorTwo * (3 * wa - 1) * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * wb * (ua * vb + ub * va) * (2 * wa - 3 * waFactorTwo + 1)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wb * (2 * wa - 3 * waFactorTwo + 1)) / 72 - (ub * vb * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * wa - 1) * (ua * vb + ub * va)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(wbFactorThree * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * va * vbFactorTwo)) / 72 - (ubFactorThree * vbFactorThree * (wbFactorTwo * (wa - 1) + (wbFactorTwo * (wa + 1)) / 2)) / 36;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 2, -1);
coeff = -(uaFactorThree * waFactorThree * vaMinus1FactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = -((3 * uaFactorTwo * ub * waFactorThree + 3 * uaFactorThree * waFactorTwo * wb) * vaMinus1FactorThree) / 216 - (uaFactorThree * vb * waFactorThree * vaMinus1FactorTwo) / 72;
out.coeff[1] += coeff * sample;
coeff = -(ua * wa * vaMinus1FactorThree * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 72 - (uaFactorThree * vbFactorTwo * waFactorThree * (va - 1)) / 72 - (uaFactorTwo * vb * waFactorTwo * vaMinus1FactorTwo * (ua * wb + ub * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = -(vaMinus1FactorThree * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 216 - (uaFactorThree * vbFactorThree * waFactorThree) / 216 - (ua * vb * wa * vaMinus1FactorTwo * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 - (uaFactorTwo * vbFactorTwo * waFactorTwo * (va - 1) * (ua * wb + ub * wa)) / 24;
out.coeff[3] += coeff * sample;
coeff = -(vb * vaMinus1FactorTwo * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 - (ub * wb * vaMinus1FactorThree * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 72 - (uaFactorTwo * vbFactorThree * waFactorTwo * (ua * wb + ub * wa)) / 72 - (ua * vbFactorTwo * wa * (va - 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = -(vbFactorTwo * (va - 1) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 - (ubFactorTwo * wbFactorTwo * vaMinus1FactorThree * (ua * wb + ub * wa)) / 72 - (ua * vbFactorThree * wa * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 72 - (ub * vb * wb * vaMinus1FactorTwo * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = -(vbFactorThree * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 216 - (ubFactorThree * wbFactorThree * vaMinus1FactorThree) / 216 - (ub * vbFactorTwo * wb * (va - 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vb * wbFactorTwo * vaMinus1FactorTwo * (ua * wb + ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = -(ubFactorThree * vb * wbFactorThree * vaMinus1FactorTwo) / 72 - (ub * vbFactorThree * wb * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 72 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (va - 1) * (ua * wb + ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (3 * ua * ubFactorTwo * wbFactorThree + 3 * ubFactorThree * wa * wbFactorTwo)) / 216 - (ubFactorThree * vbFactorTwo * wbFactorThree * (va - 1)) / 72;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
sample = VALS(2, 2, 0);
coeff = (uaFactorThree * waFactorThree * ((vaFactorTwo * (va - 2)) / 2 + 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = (uaFactorTwo * waFactorTwo * (ua * wb + ub * wa) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (uaFactorThree * va * vb * waFactorThree * (3 * va - 4)) / 72;
out.coeff[1] += coeff * sample;
coeff = (uaFactorThree * vbFactorTwo * waFactorThree * (3 * va - 2)) / 72 + (ua * wa * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * va * vb * waFactorTwo * (3 * va - 4) * (ua * wb + ub * wa)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((vaFactorThree / 2 - vaFactorTwo + 2.f / 3) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 36 + (uaFactorThree * vbFactorThree * waFactorThree) / 72 + (uaFactorTwo * vbFactorTwo * waFactorTwo * (3 * va - 2) * (ua * wb + ub * wa)) / 24 + (ua * va * vb * wa * (3 * va - 4) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (ub * wb * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (uaFactorTwo * vbFactorThree * waFactorTwo * (ua * wb + ub * wa)) / 24 + (va * vb * (3 * va - 4) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 + (ua * vbFactorTwo * wa * (3 * va - 2) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (vbFactorTwo * (3 * va - 2) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 + (ubFactorTwo * wbFactorTwo * (ua * wb + ub * wa) * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 12 + (ua * vbFactorThree * wa * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 + (ub * va * vb * wb * (3 * va - 4) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (vbFactorThree * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 + (ubFactorThree * wbFactorThree * (vaFactorThree / 2 - vaFactorTwo + 2.f / 3)) / 36 + (ub * vbFactorTwo * wb * (3 * va - 2) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * va * vb * wbFactorTwo * (3 * va - 4) * (ua * wb + ub * wa)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ub * vbFactorThree * wb * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 2) * (ua * wb + ub * wa)) / 24 + (ubFactorThree * va * vb * wbFactorThree * (3 * va - 4)) / 72;
out.coeff[7] += coeff * sample;
coeff = (vbFactorThree * (3 * ua * ubFactorTwo * wbFactorThree + 3 * ubFactorThree * wa * wbFactorTwo)) / 72 + (ubFactorThree * wbFactorThree * ((vbFactorTwo * (va - 2)) / 2 + va * vbFactorTwo)) / 36;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 2, 1);
coeff = -(uaFactorThree * waFactorThree * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 36;
out.coeff[0] += coeff * sample;
coeff = -((3 * uaFactorTwo * ub * waFactorThree + 3 * uaFactorThree * waFactorTwo * wb) * ((vaMinus1FactorTwo * (va + 1)) / 2 - 2.f / 3)) / 36 - (uaFactorThree * waFactorThree * ((vb * vaMinus1FactorTwo) / 2 + vb * (va - 1) * (va + 1))) / 36;
out.coeff[1] += coeff * sample;
coeff = (ua * wa * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (uaFactorThree * vbFactorTwo * waFactorThree * (3 * va - 1)) / 72 + (uaFactorTwo * vb * waFactorTwo * (ua * wb + ub * wa) * (2 * va - 3 * vaFactorTwo + 1)) / 24;
out.coeff[2] += coeff * sample;
coeff = ((uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 36 - (uaFactorThree * vbFactorThree * waFactorThree) / 72 - (uaFactorTwo * vbFactorTwo * waFactorTwo * (3 * va - 1) * (ua * wb + ub * wa)) / 24 + (ua * vb * wa * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[3] += coeff * sample;
coeff = (vb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 + (ub * wb * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (uaFactorTwo * vbFactorThree * waFactorTwo * (ua * wb + ub * wa)) / 24 - (ua * vbFactorTwo * wa * (3 * va - 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (ubFactorTwo * wbFactorTwo * (ua * wb + ub * wa) * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 12 - (vbFactorTwo * (3 * va - 1) * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 - (ua * vbFactorThree * wa * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 + (ub * vb * wb * (2 * va - 3 * vaFactorTwo + 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (ubFactorThree * wbFactorThree * (va / 2 + vaFactorTwo / 2 - vaFactorThree / 2 + 1.f / 6)) / 36 - (vbFactorThree * (uaFactorThree * wbFactorThree + ubFactorThree * waFactorThree + 9 * ua * ubFactorTwo * waFactorTwo * wb + 9 * uaFactorTwo * ub * wa * wbFactorTwo)) / 72 - (ub * vbFactorTwo * wb * (3 * va - 1) * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 + (ubFactorTwo * vb * wbFactorTwo * (ua * wb + ub * wa) * (2 * va - 3 * vaFactorTwo + 1)) / 24;
out.coeff[6] += coeff * sample;
coeff = (ubFactorThree * vb * wbFactorThree * (2 * va - 3 * vaFactorTwo + 1)) / 72 - (ub * vbFactorThree * wb * (uaFactorTwo * wbFactorTwo + ubFactorTwo * waFactorTwo + 3 * ua * ub * wa * wb)) / 24 - (ubFactorTwo * vbFactorTwo * wbFactorTwo * (3 * va - 1) * (ua * wb + ub * wa)) / 24;
out.coeff[7] += coeff * sample;
coeff = -(vbFactorThree * (3 * ua * ubFactorTwo * wbFactorThree + 3 * ubFactorThree * wa * wbFactorTwo)) / 72 - (ubFactorThree * wbFactorThree * (vbFactorTwo * (va - 1) + (vbFactorTwo * (va + 1)) / 2)) / 36;
out.coeff[8] += coeff * sample;
coeff = -(ubFactorThree * vbFactorThree * wbFactorThree) / 72;
out.coeff[9] += coeff * sample;
sample = VALS(2, 2, 2);
coeff = (uaFactorThree * vaFactorThree * waFactorThree) / 216;
out.coeff[0] += coeff * sample;
coeff = (waFactorThree * (3 * uaFactorTwo * ub * vaFactorThree + 3 * uaFactorThree * vaFactorTwo * vb)) / 216 + (uaFactorThree * vaFactorThree * waFactorTwo * wb) / 72;
out.coeff[1] += coeff * sample;
coeff = (waFactorThree * (3 * ua * ubFactorTwo * vaFactorThree + 3 * uaFactorThree * va * vbFactorTwo + 9 * uaFactorTwo * ub * vaFactorTwo * vb)) / 216 + (waFactorTwo * wb * (3 * uaFactorTwo * ub * vaFactorThree + 3 * uaFactorThree * vaFactorTwo * vb)) / 72 + (uaFactorThree * vaFactorThree * wa * wbFactorTwo) / 72;
out.coeff[2] += coeff * sample;
coeff = (waFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 216 + (uaFactorThree * vaFactorThree * wbFactorThree) / 216 + (ua * va * waFactorTwo * wb * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (uaFactorTwo * vaFactorTwo * wa * wbFactorTwo * (ua * vb + ub * va)) / 24;
out.coeff[3] += coeff * sample;
coeff = (waFactorTwo * wb * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ub * vb * waFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 + (uaFactorTwo * vaFactorTwo * wbFactorThree * (ua * vb + ub * va)) / 72 + (ua * va * wa * wbFactorTwo * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[4] += coeff * sample;
coeff = (wa * wbFactorTwo * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 72 + (ua * va * wbFactorThree * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 72 + (ubFactorTwo * vbFactorTwo * waFactorThree * (ua * vb + ub * va)) / 72 + (ub * vb * waFactorTwo * wb * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24;
out.coeff[5] += coeff * sample;
coeff = (wbFactorThree * (uaFactorThree * vbFactorThree + ubFactorThree * vaFactorThree + 9 * ua * ubFactorTwo * vaFactorTwo * vb + 9 * uaFactorTwo * ub * va * vbFactorTwo)) / 216 + (ubFactorThree * vbFactorThree * waFactorThree) / 216 + (ub * vb * wa * wbFactorTwo * (uaFactorTwo * vbFactorTwo + ubFactorTwo * vaFactorTwo + 3 * ua * ub * va * vb)) / 24 + (ubFactorTwo * vbFactorTwo * waFactorTwo * wb * (ua * vb + ub * va)) / 24;
out.coeff[6] += coeff * sample;
coeff = (wbFactorThree * (3 * uaFactorTwo * ub * vbFactorThree + 3 * ubFactorThree * vaFactorTwo * vb + 9 * ua * ubFactorTwo * va * vbFactorTwo)) / 216 + (wa * wbFactorTwo * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * va * vbFactorTwo)) / 72 + (ubFactorThree * vbFactorThree * waFactorTwo * wb) / 72;
out.coeff[7] += coeff * sample;
coeff = (wbFactorThree * (3 * ua * ubFactorTwo * vbFactorThree + 3 * ubFactorThree * va * vbFactorTwo)) / 216 + (ubFactorThree * vbFactorThree * wa * wbFactorTwo) / 72;
out.coeff[8] += coeff * sample;
coeff = (ubFactorThree * vbFactorThree * wbFactorThree) / 216;
out.coeff[9] += coeff * sample;
#undef VALS

return out;